interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation ud: de.up.ling.irtg.algebra.graph.GraphAlgebra


NNP -> rule_17(NNP,IN) [0.005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_25(NN,JJ) [0.0033076074972436605]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_28(NN,DT,IN) [0.0027563395810363835]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNP -> rule_29(NNP,IN) [0.002205071664829107]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_30(NN,IN) [0.002205071664829107]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_32(NNS,DT) [0.002205071664829107]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_33(NNS,JJ) [0.002205071664829107]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

WP -> rule_36(WP,VBD) [0.0016538037486218302]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_38(NN,IN,DT) [0.0016538037486218302]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNP -> rule_39(NNP,POS) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_40(NN,PRPDOLLAR) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

RB -> rule_41(RB,RB) [0.0016538037486218302]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_42(NN,DT,IN) [0.0016538037486218302]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_44(NN,IN,NN) [0.0016538037486218302]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_45(NN,JJ) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_46(NN,PRPDOLLAR) [0.0016538037486218302]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_47(NN,VB,IN) [0.0016538037486218302]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_48(NN,DT) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NN -> rule_49(NN,JJ,DT) [0.0016538037486218302]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_50(NN,DT,JJ) [0.0016538037486218302]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :amod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNP -> rule_52(NNP,NNP) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_53(NNP,DT) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_54(NNS,IN,JJ) [0.0016538037486218302]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :amod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

IN -> rule_55(IN,IN) [0.0016538037486218302]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :fixed (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_56(NNS,CC) [0.0016538037486218302]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

NN -> rule_57(NN,DT,POS) [0.0016538037486218302]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBD -> rule_58(VBD,NNP,NNP,PERIOD,IN) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :nsubj (d2<dep2>) :punct (d3<dep3>) :mark (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_59(NN,HYPH,NN,NN,HYPHENLRBHYPHEN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :conj (d2<dep2>) :compound (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

JJ -> rule_60(JJ,RB,HYPH) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :punct (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_61(NNS,IN,NN,PRPDOLLAR,HYPHENRRBHYPHEN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :compound (d2<dep2>) :nmod_poss (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_62(NN,RB,CC) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :cc (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBD -> rule_63(VBD,PERIOD,NN,IN,NNS,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :obl (d2<dep2>) :mark (d3<dep3>) :obl (d4<dep4>) :nsubj (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_64(NN,DT,IN,NN,JJ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>) :compound (d3<dep3>) :amod (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNP -> rule_65(NNP,IN,NNP,NNP) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :flat (d2<dep2>) :flat (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNP -> rule_66(NNP,HYPHENLRBHYPHEN,HYPHENRRBHYPHEN,NNP,IN,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(?6,?1))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :punct (d2<dep2>) :nmod (d3<dep3>) :case (d4<dep4>) :compound (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NNS -> rule_67(NNS,DT,NN,IN) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :acl_relcl (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_68(NN,WRB,VBD,JJ,DT,DT) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :cop (d2<dep2>) :amod (d3<dep3>) :nsubj (d4<dep4>) :det (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_69(NN,NNS,COMMA,JJ,HYPHENLRBHYPHEN,COMMA,CC,PERIOD,VBZ,NN,HYPHENRRBHYPHEN,NN) [0.0011025358324145535]
[string] *(*(*(*(?2,?3),*(?4,?5)),*(*(?6,?7),*(?8,?1))),*(*(?9,?10),*(?11,?12)))
[ud] f_dep11(f_dep10(f_dep9(f_dep8(f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :punct (d2<dep2>) :obl_npmod (d3<dep3>) :punct (d4<dep4>) :punct (d5<dep5>) :cc (d6<dep6>) :punct (d7<dep7>) :cop (d8<dep8>) :nsubj (d9<dep9>) :punct (d10<dep10>) :obl (d11<dep11>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)), r_dep8(?9)), r_dep9(?10)), r_dep10(?11)), r_dep11(?12)))))))))))))

JJ -> rule_70(JJ,RB,DT) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_71(NN,DT,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :compound (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBN -> rule_72(VBN,RB,RB,WDT,PRP,VBP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :advmod (d2<dep2>) :obj (d3<dep3>) :nsubj (d4<dep4>) :aux (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VBN -> rule_73(VBN,VBZ,COMMA,HYPH,RB,CC,PRP,NN,RB) [0.0011025358324145535]
[string] *(*(*(*(?2,?3),*(?4,?1)),*(*(?5,?6),*(?7,?8))),?9)
[ud] f_dep8(f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>) :punct (d2<dep2>) :punct (d3<dep3>) :advmod (d4<dep4>) :cc (d5<dep5>) :nsubj_pass (d6<dep6>) :obl (d7<dep7>) :advmod (d8<dep8>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)), r_dep8(?9))))))))))

NN -> rule_74(NN,IN,DT) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_75(NN,NNP,NN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_76(VB,MD,VBN,IN,COMMA,NN) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :acl_relcl (d2<dep2>) :mark (d3<dep3>) :punct (d4<dep4>) :nsubj (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VBZ -> rule_77(VBZ,VB,VBN,PERIOD,NN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :ccomp (d1<dep1>) :conj (d2<dep2>) :punct (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_78(NN,NN,JJ,VBZ,NNP,DT,PERIOD) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(*(?5,?6),?7))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :amod (d2<dep2>) :cop (d3<dep3>) :nsubj (d4<dep4>) :det (d5<dep5>) :punct (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

VB -> rule_79(VB,NN,PRP,NN,PERIOD,VBZ) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :obj (d2<dep2>) :obl (d3<dep3>) :punct (d4<dep4>) :aux (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_80(NN,IN,JJ) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :amod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

RB -> rule_81(RB,RB) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :fixed (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_82(VBP,RB,COMMA,PRP,NNP,PERIOD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :punct (d2<dep2>) :nsubj (d3<dep3>) :obj (d4<dep4>) :punct (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_83(NN,VBZ,PERIOD,DT,NN,DT) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(?6,?1))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :cop (d1<dep1>) :punct (d2<dep2>) :det (d3<dep3>) :compound (d4<dep4>) :nsubj (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VBG -> rule_84(VBG,VBP,RB,PERIOD,PRP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :advmod (d2<dep2>) :punct (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

RB -> rule_85(RB,NN) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_86(VBP,NN,RB,WP) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :advmod (d2<dep2>) :nsubj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBD -> rule_87(VBD,VB,CC,COMMA,PRP) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :ccomp (d1<dep1>) :cc (d2<dep2>) :punct (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBP -> rule_88(VBP,VBD,PERIOD,PRP,VBN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :conj (d1<dep1>) :punct (d2<dep2>) :nsubj (d3<dep3>) :ccomp (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBN -> rule_89(VBN,RB,DT,VBP,RB,JJ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :obl (d2<dep2>) :aux (d3<dep3>) :advmod (d4<dep4>) :nsubj (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

DT -> rule_90(DT,IN) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VB -> rule_91(VB,PRP,RB,MD,PRP,RB) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :advmod (d2<dep2>) :aux (d3<dep3>) :obj (d4<dep4>) :advmod (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

JJ -> rule_92(JJ,DT,VBP,RB) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :acl_relcl (d2<dep2>) :advmod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBN -> rule_93(VBN,NNP,RB,VBN,VBD) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :advmod (d2<dep2>) :conj (d3<dep3>) :aux_pass (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

WP -> rule_94(WP,VBN,IN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_95(NN,JJ,NN,WP,DT) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :compound (d2<dep2>) :nmod (d3<dep3>) :det (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNP -> rule_96(NNP,NNP,NNP) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :flat (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBN -> rule_97(VBN,NNP,RP,NN,PERIOD,VBZ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :compound_prt (d2<dep2>) :obj (d3<dep3>) :punct (d4<dep4>) :aux (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VBN -> rule_98(VBN,CC,IN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :obl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_99(VB,TO,PRP) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :obj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_100(VB,VB,PERIOD,RB) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :advcl (d1<dep1>) :punct (d2<dep2>) :advmod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

JJ -> rule_101(JJ,NNS,DT,IN) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_102(NNS,JJ,JJ,DT) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :amod (d2<dep2>) :det (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_103(NNS,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBZ -> rule_104(VBZ,PRP,PERIOD,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :punct (d2<dep2>) :obj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBZ -> rule_105(VBZ,PERIOD,NN,CD) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :obj (d2<dep2>) :nsubj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_106(NNS,IN,DT) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

CD -> rule_107(CD,NNS) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_108(VBN,NNP,WDT,VBD) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :nsubj_pass (d2<dep2>) :aux_pass (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_109(NN,DT,VBN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :acl_relcl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_110(NNS,JJ,CD,IN,DT) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :nummod (d2<dep2>) :case (d3<dep3>) :det (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBD -> rule_111(VBD,NNS,PERIOD,NNS,PRP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :punct (d2<dep2>) :obj (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNS -> rule_112(NNS,NN,CD,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :nummod (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_113(NNS,NNS) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_114(NN,NNP,IN,DT) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :case (d2<dep2>) :det (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_115(VB,PERIOD,NN,NNS) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :obl (d2<dep2>) :obj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_116(VB,NNS,TO) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :mark (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBP -> rule_117(VBP,VB,PRP,PERIOD,COMMA,JJ) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :xcomp (d1<dep1>) :nsubj (d2<dep2>) :punct (d3<dep3>) :punct (d4<dep4>) :ccomp (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

JJ -> rule_118(JJ,PRP,VBP) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :cop (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_119(VB,MD,NN,PERIOD,RP,NN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :nsubj (d2<dep2>) :punct (d3<dep3>) :compound_prt (d4<dep4>) :xcomp (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_120(NN,NNP,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_121(NN,DT,NNP) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :compound (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_122(NN,TO,VBN,VB,JJ,DT) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(?6,?1))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :advcl (d2<dep2>) :cop (d3<dep3>) :amod (d4<dep4>) :det (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_123(NN,NN,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBN -> rule_124(VBN,NN,NN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :obl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

JJ -> rule_126(JJ,RBS) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_128(NN,DT,NN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_129(NN,NNP,COMMA,VBZ,JJ,IN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>) :punct (d2<dep2>) :acl_relcl (d3<dep3>) :amod (d4<dep4>) :case (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_130(NN,VBN,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBN -> rule_131(VBN,IN,NN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :obl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_132(NN,DT,RB,VB) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :advmod (d2<dep2>) :acl_relcl (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_133(VB,MD,NN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :nsubj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBZ -> rule_134(VBZ,RP,RB,COMMA,NNS,CC) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :compound_prt (d1<dep1>) :advmod (d2<dep2>) :punct (d3<dep3>) :obj (d4<dep4>) :cc (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VBZ -> rule_135(VBZ,VBZ,VBN,COMMA,NN,COMMA,WDT) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(*(?6,?7),?1))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :conj (d1<dep1>) :advcl (d2<dep2>) :punct (d3<dep3>) :obj (d4<dep4>) :punct (d5<dep5>) :nsubj (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

NN -> rule_136(NN,DT,JJ) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :amod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_137(VB,PERIOD,PRP,VB) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :obj (d2<dep2>) :xcomp (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_138(NNS,DT,JJ,JJ) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :amod (d2<dep2>) :amod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_139(VB,NN) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_140(VBZ,HYPH,HYPH,NN,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :punct (d2<dep2>) :obj (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

JJ -> rule_141(JJ,VBP,RB,NN,PRP) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :cop (d1<dep1>) :advmod (d2<dep2>) :obl (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_142(NN,IN,DT,VBZ) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :det (d2<dep2>) :compound (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_143(VB,PRP,VB,RB,VBP,COMMA) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(?6,?1))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :xcomp (d2<dep2>) :advmod (d3<dep3>) :aux (d4<dep4>) :punct (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VB -> rule_144(VB,NN,MD,NN,IN,PRP) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :aux (d2<dep2>) :obj (d3<dep3>) :mark (d4<dep4>) :nsubj (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

JJ -> rule_145(JJ,VB,VBP,PRP,IN,NN,COMMA,COMMA) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(*(?1,?6),*(?7,?8)))
[ud] f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :ccomp (d1<dep1>) :cop (d2<dep2>) :nsubj (d3<dep3>) :mark (d4<dep4>) :parataxis (d5<dep5>) :punct (d6<dep6>) :punct (d7<dep7>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)))))))))

VB -> rule_146(VB,RP,MD,PRP,HYPH,VBG,COMMA) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(*(?5,?6),?7))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :compound_prt (d1<dep1>) :aux (d2<dep2>) :nsubj (d3<dep3>) :punct (d4<dep4>) :advcl (d5<dep5>) :punct (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

VB -> rule_147(VB,NN,NN,TO) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :obj (d2<dep2>) :mark (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_148(VB,NN,TO) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :mark (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_149(VB,VB,HYPHENLRBHYPHEN,VBP,HYPHENRRBHYPHEN,PERIOD,RB,PRP,VB,VBP,VB) [0.0011025358324145535]
[string] *(*(*(*(?2,?3),*(?1,?4)),*(*(?5,?6),*(?7,?8))),*(*(?9,?10),?11))
[ud] f_dep10(f_dep9(f_dep8(f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :xcomp (d1<dep1>) :punct (d2<dep2>) :aux (d3<dep3>) :punct (d4<dep4>) :punct (d5<dep5>) :advmod (d6<dep6>) :nsubj (d7<dep7>) :conj (d8<dep8>) :conj (d9<dep9>) :conj (d10<dep10>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)), r_dep8(?9)), r_dep9(?10)), r_dep10(?11))))))))))))

VBP -> rule_150(VBP,CC,NN,NNS,JJ,COMMA,COMMA,PRP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(*(?1,?6),*(?7,?8)))
[ud] f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :obj (d2<dep2>) :obl (d3<dep3>) :advcl (d4<dep4>) :punct (d5<dep5>) :punct (d6<dep6>) :nsubj (d7<dep7>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)))))))))

NN -> rule_151(NN,DT,IN,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>) :compound (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_152(VB,NN,WP,MD,NN) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :nsubj (d2<dep2>) :aux (d3<dep3>) :obj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNS -> rule_153(NNS,PRPDOLLAR,IN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_154(VB,MD,WP,RB,PRP,NN) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :nsubj (d2<dep2>) :advmod (d3<dep3>) :obj (d4<dep4>) :obl (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

JJ -> rule_155(JJ,RB,COMMA,RB,RB) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :punct (d2<dep2>) :advmod (d3<dep3>) :advmod (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBG -> rule_156(VBG,NN,IN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :mark (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_157(NNS,IN) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_158(NN,NNS) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_159(NN,IN,DT,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :det (d2<dep2>) :compound (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_160(NN,DT) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_161(JJ,RB) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_162(NN,JJ,NN,VBZ,PERIOD,RB,COMMA) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(*(?5,?6),?7))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :nsubj (d2<dep2>) :cop (d3<dep3>) :punct (d4<dep4>) :advmod (d5<dep5>) :punct (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

VBZ -> rule_163(VBZ,PERIOD,JJ,PRP,COMMA,NN) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :xcomp (d2<dep2>) :nsubj (d3<dep3>) :punct (d4<dep4>) :obl (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

JJ -> rule_164(JJ,RB) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_165(NN,DT,IN,JJ) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :case (d2<dep2>) :amod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBG -> rule_166(VBG,PRP,NN,VBG,VBZ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :obj (d2<dep2>) :advcl (d3<dep3>) :aux (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBZ -> rule_167(VBZ,NNP,PERIOD,VBG) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :punct (d2<dep2>) :ccomp (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBG -> rule_168(VBG,IN,NNS) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :obj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNP -> rule_169(NNP,NNP,DT) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_170(VB,NNP,RB,VBZ,NN,PERIOD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :advmod (d2<dep2>) :aux (d3<dep3>) :obj (d4<dep4>) :punct (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VB -> rule_171(VB,MD,PRP,NN,PERIOD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :nsubj (d2<dep2>) :obj (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBZ -> rule_172(VBZ,PERIOD,CC,NN,EX) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :cc (d2<dep2>) :nsubj (d3<dep3>) :expl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNP -> rule_174(NNP,IN,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :compound (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBG -> rule_175(VBG,NN,JJ) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :advcl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_176(NN,VBG,DT,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :acl (d1<dep1>) :det (d2<dep2>) :nmod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

JJ -> rule_177(JJ,IN,VB,VBG) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :xcomp (d2<dep2>) :cop (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBD -> rule_178(VBD,VBP,PRP,PERIOD,NN) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :conj (d1<dep1>) :nsubj (d2<dep2>) :punct (d3<dep3>) :obj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VB -> rule_179(VB,TO,NN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :obj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBP -> rule_180(VBP,PRP,CC,NN) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :cc (d2<dep2>) :obl (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNP -> rule_181(NNP,DT,NNP,NNP,IN) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :compound (d2<dep2>) :compound (d3<dep3>) :case (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

JJ -> rule_182(JJ,NNP,VBP,PRP,NN,PERIOD,VBG,RB) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(*(?5,?6),*(?7,?8)))
[ud] f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :aux (d2<dep2>) :nsubj (d3<dep3>) :obl (d4<dep4>) :punct (d5<dep5>) :cop (d6<dep6>) :advmod (d7<dep7>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)))))))))

NN -> rule_183(NN,NN,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_184(NN,NN,IN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBN -> rule_185(VBN,RB,PERIOD,VBZ,NNP,VB) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :punct (d2<dep2>) :aux (d3<dep3>) :nsubj (d4<dep4>) :ccomp (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VB -> rule_186(VB,RB,MD,PRP,RB,VB) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :aux (d2<dep2>) :nsubj (d3<dep3>) :advmod (d4<dep4>) :xcomp (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VB -> rule_187(VB,VB,VBN,NNP,TO) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :advcl (d1<dep1>) :xcomp (d2<dep2>) :obj (d3<dep3>) :mark (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNS -> rule_188(NNS,IN,JJ) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :amod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_189(VB,VB,PRP,MD) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :xcomp (d1<dep1>) :nsubj (d2<dep2>) :aux (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBN -> rule_190(VBN,NN,WDT) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :obj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_191(VB,NNS,TO) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :mark (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBZ -> rule_192(VBZ,IN,NN,NNS,PRP) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :obj (d2<dep2>) :obl (d3<dep3>) :nsubj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBN -> rule_193(VBN,VBZ,PRP,VBZ,PERIOD,CC) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :ccomp (d1<dep1>) :nsubj (d2<dep2>) :aux (d3<dep3>) :punct (d4<dep4>) :cc (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_194(NN,JJ,IN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_195(VB,NN,NN,TO,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :obj (d2<dep2>) :mark (d3<dep3>) :obl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBP -> rule_196(VBP,NNS,PERIOD,VB) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :punct (d2<dep2>) :xcomp (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VB -> rule_197(VB,CC,PERIOD,NN,MD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :punct (d2<dep2>) :nsubj (d3<dep3>) :aux (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VB -> rule_198(VB,MD,CC,PERIOD,NN,NN,NN) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(*(?5,?6),?7))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :cc (d2<dep2>) :punct (d3<dep3>) :nsubj (d4<dep4>) :obj (d5<dep5>) :obl (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

NN -> rule_199(NN,CD) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_200(VBD,NN,RP,PERIOD,VBD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :compound_prt (d2<dep2>) :punct (d3<dep3>) :ccomp (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNPS -> rule_201(NNPS,NN,DT) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBD -> rule_202(VBD,IN,NNPS,NNP,VBD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :obj (d2<dep2>) :nsubj (d3<dep3>) :advcl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBD -> rule_203(VBD,NN,WRB,PRP,PRP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :xcomp (d1<dep1>) :mark (d2<dep2>) :nsubj (d3<dep3>) :obj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBN -> rule_204(VBN,VBZ,PRP,DT,PERIOD) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :nsubj (d2<dep2>) :obj (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VB -> rule_205(VB,PRP,PERIOD,VBP,RB,VB) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),*(?6,?1))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :punct (d2<dep2>) :aux (d3<dep3>) :advmod (d4<dep4>) :xcomp (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VB -> rule_206(VB,PRP,TO) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :mark (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_207(VB,PRP,PERIOD,MD,CC,PRP,RB) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),*(*(?5,?6),?7))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :punct (d2<dep2>) :aux (d3<dep3>) :cc (d4<dep4>) :obj (d5<dep5>) :advmod (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

NN -> rule_208(NN,IN,NN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBP -> rule_209(VBP,NN,CC,RB) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :cc (d2<dep2>) :advmod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBP -> rule_210(VBP,NNPS,VBP,NNS,RB,IN) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :conj (d2<dep2>) :obj (d3<dep3>) :advmod (d4<dep4>) :mark (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

VB -> rule_211(VB,VBP,VBZ,PRP,PERIOD) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :ccomp (d1<dep1>) :aux (d2<dep2>) :expl (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBN -> rule_214(VBN,IN,VBD,NNS,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :aux (d2<dep2>) :nsubj_pass (d3<dep3>) :obl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_215(NN,HYPHENRRBHYPHEN,HYPHENLRBHYPHEN,CD) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :punct (d2<dep2>) :appos (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNP -> rule_216(NNP,NN,IN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :appos (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_217(NN,IN,DT,NN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :det (d2<dep2>) :compound (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_218(NN,NNP,IN,DT,JJ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :case (d2<dep2>) :det (d3<dep3>) :amod (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNS -> rule_219(NNS,VBN,NN,DT) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :acl (d1<dep1>) :compound (d2<dep2>) :det (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_220(NNS,JJ) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_221(VBD,NNS,NN,PERIOD,VBN,NNS) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :obl (d2<dep2>) :punct (d3<dep3>) :advcl (d4<dep4>) :nsubj (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NNS -> rule_222(NNS,IN,NNP) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :compound (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBN -> rule_223(VBN,NNS,NN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :obl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_224(NNS,DT,NN,NNS,IN) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :compound (d2<dep2>) :conj (d3<dep3>) :case (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NNS -> rule_225(NNS,NNS,DT) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_226(NN,DT,SQSQ,NNS,IQIQ,VBG) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :punct (d2<dep2>) :nmod (d3<dep3>) :punct (d4<dep4>) :acl (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NNS -> rule_227(NNS,CD,NN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nummod (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_228(NNS,NN,JJ) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :amod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBD -> rule_229(VBD,NNP,PERIOD,VBD,SQSQ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :nsubj (d1<dep1>) :punct (d2<dep2>) :ccomp (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBG -> rule_230(VBG,NNS,VBG,VBG) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :conj (d2<dep2>) :conj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_231(NNS,NNP,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBD -> rule_232(VBD,IN,NNS,NN,IQIQ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :nsubj (d2<dep2>) :obj (d3<dep3>) :punct (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_233(NN,IN) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_234(VBG,COMMA,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :obj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_235(NN,NN,IN,DT,JJ) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :nmod_tmod (d1<dep1>) :case (d2<dep2>) :det (d3<dep3>) :amod (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBG -> rule_236(VBG,CC,COMMA,NN) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :punct (d2<dep2>) :obl (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBN -> rule_237(VBN,VBD,NNS,WDT,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :aux (d1<dep1>) :obl (d2<dep2>) :nsubj_pass (d3<dep3>) :obl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBD -> rule_238(VBD,PERIOD,VBP,PRP,IQIQ,COMMA) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :ccomp (d2<dep2>) :nsubj (d3<dep3>) :punct (d4<dep4>) :punct (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NN -> rule_239(NN,DT,VBN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :acl_relcl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBP -> rule_240(VBP,NN,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :nsubj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_241(NN,IN,NNP,DT) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :nmod (d2<dep2>) :det (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_242(NNS,DT,NNP) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :nmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_243(NNS,JJ,IN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

JJ -> rule_244(JJ,NN) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_245(VBP,COMMA,CC,PRP,VB) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :cc (d2<dep2>) :iobj (d3<dep3>) :xcomp (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VB -> rule_246(VB,NN,TO,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :mark (d2<dep2>) :obj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

JJ -> rule_247(JJ,IN,PRP,VBP,VBP,VBG) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :nsubj (d2<dep2>) :conj (d3<dep3>) :cop (d4<dep4>) :advcl (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

JJ -> rule_248(JJ,HYPHENLRBHYPHEN,HYPHENRRBHYPHEN) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :punct (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNS -> rule_249(NNS,JJ,NNS,JJ) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :conj (d2<dep2>) :amod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NN -> rule_250(NN,NN,NN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>) :conj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VB -> rule_251(VB,SQSQ,PERIOD,VB,NNS) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :punct (d2<dep2>) :xcomp (d3<dep3>) :obj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBG -> rule_252(VBG,NN,IN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :mark (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_253(NN,CC) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VB -> rule_254(VB,JJ) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_255(NNS,PRPDOLLAR) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_256(VBD,PERIOD,NNS,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :nsubj (d2<dep2>) :obj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_257(NNS,JJ,IN,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :case (d2<dep2>) :compound (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_258(NNS,NNS) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_259(VBN,CC,VBP,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :aux (d2<dep2>) :xcomp (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_260(NNS,IN,RB,NNP,DT) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :advmod (d2<dep2>) :compound (d3<dep3>) :det (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

JJ -> rule_261(JJ,CC,VBN,NN) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :cc_preconj (d1<dep1>) :conj (d2<dep2>) :obl (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBP -> rule_262(VBP,JJ,NNPS,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :xcomp (d1<dep1>) :nsubj (d2<dep2>) :mark (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_263(NNS,JJ,NNS) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :conj (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBN -> rule_264(VBN,RB,COMMA,NNS,VBN,PERIOD,NNP,VBZ,VBP) [0.0011025358324145535]
[string] *(*(*(*(?2,?3),*(?4,?1)),*(*(?5,?6),*(?7,?8))),?9)
[ud] f_dep8(f_dep7(f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :advmod (d1<dep1>) :punct (d2<dep2>) :obl (d3<dep3>) :aux (d4<dep4>) :punct (d5<dep5>) :nsubj_pass (d6<dep6>) :aux (d7<dep7>) :advcl (d8<dep8>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7)), r_dep7(?8)), r_dep8(?9))))))))))

NNPS -> rule_265(NNPS,JJ) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_266(NNS,IN,NNS,JJ) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :nmod (d2<dep2>) :amod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_267(NNS,CC,RB) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :advmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_268(NN,JJ,IN) [0.0011025358324145535]
[string] *(*(?2,?3),?1)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_269(NN,DT,NN,JJ) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :nmod (d2<dep2>) :amod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBD -> rule_270(VBD,NN,CC) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :cc (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NN -> rule_271(NN,NN,IN,NN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>) :case (d2<dep2>) :conj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

JJ -> rule_272(JJ,IN) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :fixed (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_273(NNP,JJ) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_274(VBD,PERIOD,NNS,VBD,NN,NNP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),*(?5,?6))
[ud] f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :nsubj (d2<dep2>) :conj (d3<dep3>) :obj (d4<dep4>) :obl (d5<dep5>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)))))))

NNS -> rule_275(NNS,NNP) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_276(NN,CC) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_277(VBP,PERIOD,PRP,VBZ,VBP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :punct (d1<dep1>) :nsubj (d2<dep2>) :ccomp (d3<dep3>) :conj (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_278(NN,NN,DT) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :conj (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

VBZ -> rule_279(VBZ,NN,NN,IN,PRP) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :obj (d1<dep1>) :nsubj (d2<dep2>) :mark (d3<dep3>) :obl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_280(NN,DT,COMMA,NNPS,CC) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?1,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :punct (d2<dep2>) :nmod (d3<dep3>) :cc (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

NN -> rule_281(NN,JJ,DT) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :amod (d1<dep1>) :det (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNPS -> rule_282(NNPS,DT,NNPS,IN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :det (d1<dep1>) :conj (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNPS -> rule_283(NNPS,CC) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_284(VBP,CC,PRP,COMMA,VB) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?5)),?1)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :nsubj (d2<dep2>) :punct (d3<dep3>) :xcomp (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VB -> rule_285(VB,TO,RB) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :mark (d1<dep1>) :advmod (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

PRP -> rule_286(PRP,IN) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VB -> rule_288(VB,ADD) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_289(NN,JJ,IN,CD,DT) [0.0011025358324145535]
[string] *(*(*(?1,?2),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>) :case (d2<dep2>) :compound (d3<dep3>) :det (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

VBD -> rule_290(VBD,NN,NNP,NN,PERIOD,NNP,NN) [0.0011025358324145535]
[string] *(*(*(?2,?3),*(?4,?1)),*(*(?5,?6),?7))
[ud] f_dep6(f_dep5(f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :obl (d2<dep2>) :obj (d3<dep3>) :punct (d4<dep4>) :nsubj (d5<dep5>) :obl_tmod (d6<dep6>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5)), r_dep5(?6)), r_dep6(?7))))))))

JJ -> rule_291(JJ,NNS,VBZ,WDT) [0.0011025358324145535]
[string] *(*(?1,?2),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :obl_npmod (d1<dep1>) :cop (d2<dep2>) :nsubj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBG -> rule_292(VBG,CC,NNP,NNS) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :cc (d1<dep1>) :nsubj (d2<dep2>) :obj (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBG -> rule_293(VBG,VBG,IN,NNP,NN) [0.0011025358324145535]
[string] *(*(*(?2,?1),*(?3,?4)),?5)
[ud] f_dep4(f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(merge(?1,"(r<root> :conj (d1<dep1>) :mark (d2<dep2>) :nsubj (d3<dep3>) :obl (d4<dep4>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)), r_dep4(?5))))))

CD -> rule_294(CD,SYM) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

CD -> rule_295(CD,CD) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_296(NNP,NNP) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :flat (d1<dep1>))"), r_dep1(?2)))

NN -> rule_297(NN,NNP,DT,IN) [0.0011025358324145535]
[string] *(*(?2,?1),*(?3,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :compound (d1<dep1>) :det (d2<dep2>) :case (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNP -> rule_298(NNP,NNP,IN) [0.0011025358324145535]
[string] *(*(?2,?1),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :nmod (d1<dep1>) :case (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNP -> rule_299(NNP,NNP) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :flat (d1<dep1>))"), r_dep1(?2)))

NN -> rule_300(NN,IN,PRPDOLLAR,NN) [0.0011025358324145535]
[string] *(*(?2,?3),*(?4,?1))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :case (d1<dep1>) :nmod_poss (d2<dep2>) :nmod (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

VBN -> rule_301(VBN,NNS,VBG) [0.0011025358324145535]
[string] *(*(?1,?2),?3)
[ud] f_dep2(f_dep1(merge(merge(merge(?1,"(r<root> :obl (d1<dep1>) :advcl (d2<dep2>))"), r_dep1(?2)), r_dep2(?3))))

NNP -> rule_302(NNP,VBN,DT,NNP) [0.0011025358324145535]
[string] *(*(?2,?3),*(?1,?4))
[ud] f_dep3(f_dep2(f_dep1(merge(merge(merge(merge(?1,"(r<root> :acl (d1<dep1>) :det (d2<dep2>) :compound (d3<dep3>))"), r_dep1(?2)), r_dep2(?3)), r_dep3(?4)))))

NNS -> rule_303(NNS,DT) [0.0011025358324145535]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_304(NNS,CD) [0.0011025358324145535]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_306(VBZ,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_307(VBZ,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_308(VBZ,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_309(VBZ,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_310(VBZ,COLON) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_311(VBZ,COLON) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_312(NNP,DT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_313(NNS,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_314(NNS,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_315(NNS,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_316(NN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NN -> rule_317(NN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_318(NNS,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_319(NNS,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

VB -> rule_320(VB,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_321(VB,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_322(VB,TO) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VB -> rule_323(VB,TO) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_324(VBD,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_325(VBD,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_326(VBD,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_327(VBD,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_328(VBD,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_329(VBD,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_330(VBD,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_331(VBD,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_332(VBD,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_333(VBD,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_334(NNS,CD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_335(VBG,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_336(VBG,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_337(VBD,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_338(VBD,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_339(VBD,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_340(VBD,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_341(VBD,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_342(VBD,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_343(VBD,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_344(VBD,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_345(NNP,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_346(NNP,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_347(NNP,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_348(NN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_349(NN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_350(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_351(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_352(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NN -> rule_353(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NN -> rule_354(NN,CD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_355(NN,HYPH) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_356(NN,HYPH) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_357(NNPS,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_358(NNPS,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_359(VBD,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_360(VBD,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_361(NNP,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_362(NNP,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_363(NN,CD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NN -> rule_364(NN,CD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_365(VBN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_366(VBN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_367(VBN,HYPH) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_368(VBN,HYPH) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_369(VBN,VBZ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_370(VBN,VBZ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_371(VBN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_372(VBN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_373(VBN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_374(VBN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_375(VBN,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_376(VBN,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_377(VBN,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_378(VBN,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_379(NN,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_380(NN,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_381(VBP,CC) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_382(VBP,CC) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_383(VBP,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_384(VBP,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_385(VBP,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_386(VBP,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_387(VBP,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_388(VBP,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_389(VBP,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_390(VBP,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_391(VBN,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_392(VBN,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_393(VBN,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_394(VBN,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_395(VBN,MD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_396(VBN,MD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_397(VBN,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_398(VBN,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_399(VBN,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_400(VBN,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_401(VBN,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_402(VBN,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_403(VBD,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_404(VBD,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_405(VBD,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_406(VBD,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_407(VBD,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_408(VBD,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

RB -> rule_409(RB,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

RB -> rule_410(RB,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_411(NN,VBZ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

NN -> rule_412(NN,VBZ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

NN -> rule_413(NN,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_414(NN,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_415(VBD,CC) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_416(VBD,CC) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_417(NNS,PDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :det_predet (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_418(NNS,PDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :det_predet (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_419(NNPS,DT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_420(NNPS,DT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :det (d1<dep1>))"), r_dep1(?2)))

NN -> rule_421(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_422(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_423(VBN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_424(VBN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_425(VBN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_426(VBN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_427(VBN,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_428(VBN,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

NN -> rule_429(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_430(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_431(VBZ,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_432(VBZ,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_433(VBZ,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_434(VBZ,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NN -> rule_435(NN,POS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_436(NN,POS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_437(VBP,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_438(VBP,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_439(VBP,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :parataxis (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_440(VBP,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :parataxis (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_441(VBP,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_442(VBP,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_443(VBP,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_444(VBP,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_445(VBP,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_446(VBP,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_447(VBP,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_448(VBP,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_449(VB,MD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VB -> rule_450(VB,MD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VB -> rule_451(VB,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_452(VB,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_453(VB,EX) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_454(VB,EX) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_455(NN,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

FW -> rule_456(FW,FW) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :flat_foreign (d1<dep1>))"), r_dep1(?2)))

FW -> rule_457(FW,FW) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :flat_foreign (d1<dep1>))"), r_dep1(?2)))

FW -> rule_458(FW,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

FW -> rule_459(FW,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_460(VBD,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_461(VBD,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_462(VBD,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_463(VBD,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_464(VBG,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_465(VBG,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_466(JJ,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_467(JJ,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_468(JJ,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_469(JJ,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_470(JJ,CC) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_471(JJ,CC) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_472(JJ,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_473(JJ,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_474(JJ,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_475(JJ,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_476(VBD,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_477(VBD,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_478(NNP,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_479(NNP,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_480(NN,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_481(NN,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_482(VBD,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_483(VBD,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_484(VBD,WRB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_485(VBD,WRB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_486(VBP,HYPHENRRBHYPHEN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_487(VBP,HYPHENRRBHYPHEN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_488(VBP,HYPHENLRBHYPHEN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_489(VBP,HYPHENLRBHYPHEN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_490(VBP,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_491(VBP,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_492(VBP,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_493(VBP,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_494(NNS,PRPDOLLAR) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_495(NN,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_496(NN,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_497(NN,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

NN -> rule_498(NN,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

NN -> rule_499(NN,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

NN -> rule_500(NN,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

NN -> rule_501(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_502(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_503(VBD,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_504(VBD,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_505(VBD,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_506(VBD,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_507(NNS,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_508(NNS,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_509(VBG,CD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_510(VBG,CD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_511(NN,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_512(NN,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_513(NNPS,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_514(VBZ,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :csubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_515(VBZ,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :csubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_516(VBZ,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_517(VBZ,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_518(VBZ,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_519(VBZ,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_520(VBZ,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_521(VBZ,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_522(VBN,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_523(VBN,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_524(VBN,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_525(VBN,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

RB -> rule_526(RB,RBS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :fixed (d1<dep1>))"), r_dep1(?2)))

RB -> rule_527(RB,RBS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :fixed (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_528(NNS,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_529(NNS,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_530(NNS,CC) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_531(NNS,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_532(NNS,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_533(NNS,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_534(NNS,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_535(JJ,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_536(JJ,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_537(JJ,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_538(JJ,WDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_539(JJ,WDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

PRP -> rule_540(PRP,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

RB -> rule_541(RB,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

RB -> rule_542(RB,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_543(NNS,HYPHENRRBHYPHEN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_544(NNS,HYPHENRRBHYPHEN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_545(NNS,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_546(NNS,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_547(NN,COLON) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_548(NN,COLON) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_549(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :appos (d1<dep1>))"), r_dep1(?2)))

NN -> rule_550(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :appos (d1<dep1>))"), r_dep1(?2)))

NN -> rule_551(NN,HYPHENLRBHYPHEN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_552(NN,HYPHENLRBHYPHEN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_553(VBN,WP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_554(VBN,WP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_555(VBN,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_556(VBN,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_557(VBN,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_558(VBN,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VB -> rule_559(VB,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_560(VB,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_561(VB,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_562(NN,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_563(NN,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_564(NNS,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_565(NNS,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_566(NN,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_567(NN,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_568(NN,DT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_569(NN,DT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_570(NN,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_571(NN,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_572(NN,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

NN -> rule_573(NN,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

VB -> rule_574(VB,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_575(VB,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_576(VB,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VB -> rule_577(VB,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VB -> rule_578(VB,RP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound_prt (d1<dep1>))"), r_dep1(?2)))

VB -> rule_579(VB,RP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound_prt (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_580(JJ,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_581(JJ,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_582(JJ,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_583(JJ,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_584(VBP,WRB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_585(VBP,WRB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_586(VBP,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_587(VBP,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_588(VBP,SQSQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_589(VBP,SQSQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VB -> rule_590(VB,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_591(NNS,WPDOLLAR) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_592(NNS,WPDOLLAR) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_593(NNS,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_594(NNS,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_595(VBP,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_596(VBP,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_597(JJ,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_598(JJ,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_599(JJ,IQIQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_600(JJ,IQIQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_601(JJ,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_602(JJ,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_603(VBP,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_604(VBP,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_605(VBP,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_606(VBP,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_607(NN,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_608(NN,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

RB -> rule_609(RB,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

RB -> rule_610(RB,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_611(NN,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_612(NN,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_613(NN,WPDOLLAR) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_614(NN,WPDOLLAR) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_615(VBP,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_616(VBP,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_617(NN,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :parataxis (d1<dep1>))"), r_dep1(?2)))

NN -> rule_618(NN,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :parataxis (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_619(VBZ,WDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_620(VBZ,WDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_621(VBZ,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :iobj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_622(VBZ,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :iobj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_623(VBZ,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_624(VBZ,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_625(NN,IQIQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_626(NN,IQIQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_627(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_628(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_629(NN,SQSQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NN -> rule_630(NN,SQSQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

RB -> rule_631(RB,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

RB -> rule_632(RB,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

RB -> rule_633(RB,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_634(NN,VBZ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_635(NN,VBZ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_636(NN,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_637(NN,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_638(NNS,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_639(NNS,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

VB -> rule_640(VB,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_641(VB,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_642(VB,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_643(VB,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_644(JJ,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_645(JJ,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_646(JJ,PRPDOLLAR) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_647(JJ,PRPDOLLAR) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_648(NN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_tmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_649(NN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_tmod (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_650(VBZ,EX) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_651(VBZ,EX) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_652(VBZ,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_653(VBZ,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_654(VBZ,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_655(VBZ,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VB -> rule_656(VB,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VB -> rule_657(VB,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VB -> rule_658(VB,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VB -> rule_659(VB,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VB -> rule_660(VB,VBZ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :parataxis (d1<dep1>))"), r_dep1(?2)))

VB -> rule_661(VB,VBZ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :parataxis (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_662(VBN,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_663(VBN,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_664(VBN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_665(VBN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_666(NNS,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_667(NN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NN -> rule_668(NN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod_poss (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_669(NNP,HYPH) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_670(NNP,HYPH) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_671(NNP,POS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VB -> rule_672(VB,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_673(VB,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_674(VB,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_675(VB,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_676(JJ,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_677(JJ,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_678(JJ,PERIOD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_679(JJ,PERIOD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VB -> rule_680(VB,CC) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VB -> rule_681(VB,CC) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VB -> rule_682(VB,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_683(VB,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_684(VBD,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_685(VBD,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

NN -> rule_686(NN,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_687(NN,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_688(NNPS,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_689(NNPS,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_690(NNPS,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_691(NNPS,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_692(JJ,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :fixed (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_693(NNP,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_694(VBD,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_695(VBD,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_696(VBN,WDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_697(VBN,WDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_698(VBN,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_699(VBN,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_700(VBN,WDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_701(VBN,WDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_702(VBN,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_703(VBN,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_704(VB,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VB -> rule_705(VB,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_706(VBP,WDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_707(VBP,WDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_708(VBP,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_709(VBP,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_710(NNPS,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_711(NNPS,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_712(VB,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VB -> rule_713(VB,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VB -> rule_714(VB,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_715(VB,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_716(NNPS,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_717(NNPS,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_718(NNS,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_719(NNS,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

VB -> rule_720(VB,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VB -> rule_721(VB,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VB -> rule_722(VB,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_723(VB,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_724(VBZ,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_725(VBZ,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_726(VBZ,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_727(VBZ,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advcl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_728(VBP,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_729(VBP,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :xcomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_730(VBP,IN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_731(VBP,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :mark (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_732(NNS,JJS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNS -> rule_733(NNS,JJS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_734(JJ,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_735(JJ,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_736(NN,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_737(NN,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_738(JJ,HYPH) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_739(JJ,HYPH) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_740(JJ,RBS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_741(NN,MD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

NN -> rule_742(NN,MD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux (d1<dep1>))"), r_dep1(?2)))

NN -> rule_743(NN,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :csubj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_744(NN,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :csubj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_745(NN,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

NN -> rule_746(NN,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

VB -> rule_747(VB,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VB -> rule_748(VB,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_749(VBG,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_750(VBG,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_751(VBZ,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_752(VBZ,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_753(VBZ,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBZ -> rule_754(VBZ,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_755(NNP,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_756(NNP,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_757(NNP,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :appos (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_758(NNP,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :appos (d1<dep1>))"), r_dep1(?2)))

RB -> rule_759(RB,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

RB -> rule_760(RB,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

RB -> rule_761(RB,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_npmod (d1<dep1>))"), r_dep1(?2)))

RB -> rule_762(RB,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_npmod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_763(VBD,SQSQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_764(VBD,SQSQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_765(VBD,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_766(VBD,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_767(VBD,IQIQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_768(VBD,IQIQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_769(NNP,RB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_770(NNP,RB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :advmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_771(VBN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_772(VBN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_773(VBN,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_774(VBN,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_775(VBN,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_776(VBN,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :aux_pass (d1<dep1>))"), r_dep1(?2)))

NN -> rule_777(NN,VBD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_778(NN,VBD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl_relcl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_779(VBD,WDT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_780(VBD,WDT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_781(NNP,CD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_782(NNP,CD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_783(VBD,EX) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_784(VBD,EX) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :expl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_785(NN,DT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :appos (d1<dep1>))"), r_dep1(?2)))

NN -> rule_786(NN,DT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :appos (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_787(VBN,IQIQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_788(VBN,IQIQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_789(VBN,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_790(VBN,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_791(VBN,CC) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_792(VBN,CC) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cc (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_793(VBN,SQSQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_794(VBN,SQSQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_795(VBD,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_796(VBD,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_797(NNP,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_798(NNP,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_799(JJ,VBN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_800(JJ,VBN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_801(JJ,SQSQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_802(JJ,SQSQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

DT -> rule_803(DT,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

DT -> rule_804(DT,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_805(VBG,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_806(VBG,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_807(VBG,IQIQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_808(VBG,IQIQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_809(VBG,NN) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_810(VBG,NN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_811(NNP,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NNP -> rule_812(NNP,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :amod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_813(NN,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

NN -> rule_814(NN,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :acl (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_815(VBD,VB) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_816(VBD,VB) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

DT -> rule_817(DT,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

DT -> rule_818(DT,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

DT -> rule_819(DT,IN) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_820(VBD,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_821(VBD,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_822(VBP,DT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_823(VBP,DT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_824(VBP,JJ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_825(VBP,JJ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_826(VBP,IQIQ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_827(VBP,IQIQ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_828(NNPS,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_829(NNPS,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_830(VBP,WP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_831(VBP,WP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_832(JJ,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

JJ -> rule_833(JJ,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_834(VBN,COMMA) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_835(VBN,COMMA) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :punct (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_836(VBN,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_837(VBN,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_838(VBN,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_839(VBN,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj_pass (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_840(NNPS,CD) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

NNPS -> rule_841(NNPS,CD) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nummod (d1<dep1>))"), r_dep1(?2)))

NN -> rule_842(NN,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_843(NN,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :case (d1<dep1>))"), r_dep1(?2)))

NN -> rule_844(NN,NNS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

NN -> rule_845(NN,NNS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_846(VBN,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_847(VBN,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_848(VBN,RP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound_prt (d1<dep1>))"), r_dep1(?2)))

VBN -> rule_849(VBN,RP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :compound_prt (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_850(VBG,VBZ) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_851(VBG,VBZ) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :cop (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_852(VBG,PRP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_853(VBG,PRP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_854(VBG,DT) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBG -> rule_855(VBG,DT) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_856(VBP,VBG) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBP -> rule_857(VBP,VBG) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :ccomp (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_858(VBD,NNPS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_859(VBD,NNPS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nsubj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_860(VBD,VBP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_861(VBD,VBP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :conj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_862(VBD,JJS) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_863(VBD,JJS) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obj (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_864(VBD,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

VBD -> rule_865(VBD,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :obl_tmod (d1<dep1>))"), r_dep1(?2)))

JJS -> rule_866(JJS,NNP) [0.0005512679162072767]
[string] *(?2,?1)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

JJS -> rule_867(JJS,NNP) [0.0005512679162072767]
[string] *(?1,?2)
[ud] f_dep1(merge(merge(?1,"(r<root> :nmod (d1<dep1>))"), r_dep1(?2)))

S! -> start_b_IQIQ(IQIQ) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_PERIOD(PERIOD) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_VBZ(VBZ) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_WP(WP) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_PRP(PRP) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_SYM(SYM) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_RBS(RBS) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_JJ(JJ) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_TO(TO) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_CC(CC) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_FW(FW) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_POS(POS) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_NNP(NNP) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_VBG(VBG) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_CD(CD) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_HYPHENRRBHYPHEN(HYPHENRRBHYPHEN) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_RP(RP) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_HYPH(HYPH) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_PRPDOLLAR(PRPDOLLAR) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_WDT(WDT) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_VBD(VBD) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_VBN(VBN) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_WRB(WRB) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_DT(DT) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_VB(VB) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_COMMA(COMMA) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_SQSQ(SQSQ) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_NNPS(NNPS) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_IN(IN) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_ADD(ADD) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_RB(RB) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_NNS(NNS) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_JJS(JJS) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_HYPHENLRBHYPHEN(HYPHENLRBHYPHEN) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_MD(MD) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_NN(NN) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_EX(EX) [1.0]
[string] ?1
[ud] ?1

S! -> start_b_VBP(VBP) [1.0]
[string] ?1
[ud] ?1

NN -> NN_story
[string] story
[ud] "(story<root> / story)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

VBZ -> VBZ_come
[string] come
[ud] "(come<root> / come)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_AP
[string] AP
[ud] "(AP<root> / AP)"

IN -> IN_from
[string] from
[ud] "(from<root> / from)"

COLON -> COLON_COLON
[string] COLON
[ud] "(COLON<root> / COLON)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Bush
[string] Bush
[ud] "(Bush<root> / Bush)"

NNS -> NNS_jurist
[string] jurist
[ud] "(jurist<root> / jurist)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

JJ -> JJ_federal
[string] federal
[ud] "(federal<root> / federal)"

NNP -> NNP_President
[string] President
[ud] "(President<root> / President)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

VBG -> VBG_retire
[string] retire
[ud] "(retire<root> / retire)"

NNP -> NNP_Tuesday
[string] Tuesday
[ud] "(Tuesday<root> / Tuesday)"

NNP -> NNP_Washington
[string] Washington
[ud] "(Washington<root> / Washington)"

VBD -> VBD_nominate
[string] nominate
[ud] "(nominate<root> / nominate)"

CD -> CD_two
[string] two
[ud] "(two<root> / two)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

NNS -> NNS_court
[string] court
[ud] "(court<root> / court)"

VB -> VB_replace
[string] replace
[ud] "(replace<root> / replace)"

NN -> NN_area
[string] area
[ud] "(area<root> / area)"

NNS -> NNS_individual
[string] individual
[ud] "(individual<root> / individual)"

VBG -> VBG_replace
[string] replace
[ud] "(replace<root> / replace)"

NNP -> NNP_WPERIOD
[string] WPERIOD
[ud] "(WPERIOD<root> / WPERIOD)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Columbia
[string] Columbia
[ud] "(Columbia<root> / Columbia)"

IN -> IN_as
[string] as
[ud] "(as<root> / as)"

NNP -> NNP_Superior
[string] Superior
[ud] "(Superior<root> / Superior)"

NNP -> NNP_Steffen
[string] Steffen
[ud] "(Steffen<root> / Steffen)"

NN -> NN_term
[string] term
[ud] "(term<root> / term)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

CD -> CD_DIGITDIGIT
[string] DIGITDIGIT
[ud] "(DIGITDIGIT<root> / DIGITDIGIT)"

NNP -> NNP_Graae
[string] Graae
[ud] "(Graae<root> / Graae)"

NN -> NN_judge
[string] judge
[ud] "(judge<root> / judge)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNP -> NNP_Bush
[string] Bush
[ud] "(Bush<root> / Bush)"

NN -> NN_year
[string] year
[ud] "(year<root> / year)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NNP -> NNP_Jennifer
[string] Jennifer
[ud] "(Jennifer<root> / Jennifer)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNP -> NNP_MPERIOD
[string] MPERIOD
[ud] "(MPERIOD<root> / MPERIOD)"

NNP -> NNP_Anderson
[string] Anderson
[ud] "(Anderson<root> / Anderson)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBD -> VBD_nominate
[string] nominate
[ud] "(nominate<root> / nominate)"

JJ -> JJ_associate
[string] associate
[ud] "(associate<root> / associate)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NNP -> NNP_Court
[string] Court
[ud] "(Court<root> / Court)"

NNP -> NNP_District
[string] District
[ud] "(District<root> / District)"

NFP -> NFP_ASTERISKASTERISKASTERISK
[string] ASTERISKASTERISKASTERISK
[ud] "(ASTERISKASTERISKASTERISK<root> / ASTERISKASTERISKASTERISK)"

NNP -> NNP_Kramer
[string] Kramer
[ud] "(Kramer<root> / Kramer)"

NNP -> NNP_John
[string] John
[ud] "(John<root> / John)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NN -> NN_term
[string] term
[ud] "(term<root> / term)"

NNP -> NNP_APERIOD
[string] APERIOD
[ud] "(APERIOD<root> / APERIOD)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNP -> NNP_District
[string] District
[ud] "(District<root> / District)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NNP -> NNP_Court
[string] Court
[ud] "(Court<root> / Court)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NN -> NN_year
[string] year
[ud] "(year<root> / year)"

IN -> IN_as
[string] as
[ud] "(as<root> / as)"

NNPS -> NNPS_Appeals
[string] Appeals
[ud] "(Appeals<root> / Appeals)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NNP -> NNP_Anketell
[string] Anketell
[ud] "(Anketell<root> / Anketell)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

CD -> CD_DIGITDIGIT
[string] DIGITDIGIT
[ud] "(DIGITDIGIT<root> / DIGITDIGIT)"

NNP -> NNP_Montague
[string] Montague
[ud] "(Montague<root> / Montague)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

VBG -> VBG_replace
[string] replace
[ud] "(replace<root> / replace)"

RB -> RB_also
[string] also
[ud] "(also<root> / also)"

NNP -> NNP_Bush
[string] Bush
[ud] "(Bush<root> / Bush)"

NN -> NN_judge
[string] judge
[ud] "(judge<root> / judge)"

NNP -> NNP_Noel
[string] Noel
[ud] "(Noel<root> / Noel)"

NNP -> NNP_Steadman
[string] Steadman
[ud] "(Steadman<root> / Steadman)"

VBD -> VBD_nominate
[string] nominate
[ud] "(nominate<root> / nominate)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

JJ -> JJ_associate
[string] associate
[ud] "(associate<root> / associate)"

NNP -> NNP_Columbia
[string] Columbia
[ud] "(Columbia<root> / Columbia)"

NN -> NN_wheel
[string] wheel
[ud] "(wheel<root> / wheel)"

NN -> NN_f
[string] f
[ud] "(f<root> / f)"

VBZ -> VBZ_have
[string] have
[ud] "(have<root> / have)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

NN -> NN_bomb
[string] bomb
[ud] "(bomb<root> / bomb)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

CD -> CD_DIGITDIGIT
[string] DIGITDIGIT
[ud] "(DIGITDIGIT<root> / DIGITDIGIT)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

NN -> NN_sheikh
[string] sheikh
[ud] "(sheikh<root> / sheikh)"

VBN -> VBN_be
[string] be
[ud] "(be<root> / be)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBN -> VBN_attack
[string] attack
[ud] "(attack<root> / attack)"

NN -> NN_chair
[string] chair
[ud] "(chair<root> / chair)"

VBN -> VBN_launch
[string] launch
[ud] "(launch<root> / launch)"

VBP -> VBP_have
[string] have
[ud] "(have<root> / have)"

PRP -> PRP_he
[string] he
[ud] "(he<root> / he)"

RB -> RB_ago
[string] ago
[ud] "(ago<root> / ago)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

VBN -> VBN_kill
[string] kill
[ud] "(kill<root> / kill)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNS -> NNS_year
[string] year
[ud] "(year<root> / year)"

MD -> MD_could
[string] could
[ud] "(could<root> / could)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

VBD -> VBD_do
[string] do
[ud] "(do<root> / do)"

PRP -> PRP_he
[string] he
[ud] "(he<root> / he)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

PRP -> PRP_they
[string] they
[ud] "(they<root> / they)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

CC -> CC_but
[string] but
[ud] "(but<root> / but)"

IN -> IN_since
[string] since
[ud] "(since<root> / since)"

PDT -> PDT_all
[string] all
[ud] "(all<root> / all)"

NNP -> NNP_Hamas
[string] Hamas
[ud] "(Hamas<root> / Hamas)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

PRP -> PRP_he
[string] he
[ud] "(he<root> / he)"

VBD -> VBD_found
[string] found
[ud] "(found<root> / found)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

JJ -> JJ_spiritual
[string] spiritual
[ud] "(spiritual<root> / spiritual)"

NNPS -> NNPS_israelians
[string] israelians
[ud] "(israelians<root> / israelians)"

NNS -> NNS_reason
[string] reason
[ud] "(reason<root> / reason)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_leader
[string] leader
[ud] "(leader<root> / leader)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

NN -> NN_patience
[string] patience
[ud] "(patience<root> / patience)"

NN -> NN_incident
[string] incident
[ud] "(incident<root> / incident)"

PRPDOLLAR -> PRPDOLLAR_he
[string] he
[ud] "(he<root> / he)"

NNP -> NNP_Sharon
[string] Sharon
[ud] "(Sharon<root> / Sharon)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

VBZ -> VBZ_have
[string] have
[ud] "(have<root> / have)"

NN -> NN_peace
[string] peace
[ud] "(peace<root> / peace)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_hope
[string] hope
[ud] "(hope<root> / hope)"

PRPDOLLAR -> PRPDOLLAR_he
[string] he
[ud] "(he<root> / he)"

NN -> NN_today
[string] today
[ud] "(today<root> / today)"

VBN -> VBN_lose
[string] lose
[ud] "(lose<root> / lose)"

VBZ -> VBZ_prove
[string] prove
[ud] "(prove<root> / prove)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

JJ -> JJ_nervous
[string] nervous
[ud] "(nervous<root> / nervous)"

NNS -> NNS_mistake
[string] mistake
[ud] "(mistake<root> / mistake)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBP -> VBP_suppose
[string] suppose
[ud] "(suppose<root> / suppose)"

MD -> MD_will
[string] will
[ud] "(will<root> / will)"

NN -> NN_wave
[string] wave
[ud] "(wave<root> / wave)"

JJ -> JJ_arab
[string] arab
[ud] "(arab<root> / arab)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBP -> VBP_make
[string] make
[ud] "(make<root> / make)"

NNS -> NNS_people
[string] people
[ud] "(people<root> / people)"

JJ -> JJ_succesfull
[string] succesfull
[ud] "(succesfull<root> / succesfull)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

EX -> EX_there
[string] there
[ud] "(there<root> / there)"

RB -> RB_so
[string] so
[ud] "(so<root> / so)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

PRP -> PRP_I
[string] I
[ud] "(I<root> / I)"

NNS -> NNS_attack
[string] attack
[ud] "(attack<root> / attack)"

FW -> FW_a
[string] a
[ud] "(a<root> / a)"

PERIOD -> PERIOD_EXC
[string] EXC
[ud] "(EXC<root> / EXC)"

FW -> FW_guerre
[string] guerre
[ud] "(guerre<root> / guerre)"

FW -> FW_a
[string] a
[ud] "(a<root> / a)"

FW -> FW_la
[string] la
[ud] "(la<root> / la)"

FW -> FW_comme
[string] comme
[ud] "(comme<root> / comme)"

FW -> FW_la
[string] la
[ud] "(la<root> / la)"

FW -> FW_cSQest
[string] cSQest
[ud] "(cSQest<root> / cSQest)"

FW -> FW_guerre
[string] guerre
[ud] "(guerre<root> / guerre)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_bomb
[string] bomb
[ud] "(bomb<root> / bomb)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_police
[string] police
[ud] "(police<root> / police)"

NNS -> NNS_people
[string] people
[ud] "(people<root> / people)"

NN -> NN_city
[string] city
[ud] "(city<root> / city)"

JJ -> JJ_several
[string] several
[ud] "(several<root> / several)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

JJ -> JJ_eastern
[string] eastern
[ud] "(eastern<root> / eastern)"

NN -> NN_car
[string] car
[ud] "(car<root> / car)"

VBG -> VBG_kill
[string] kill
[ud] "(kill<root> / kill)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNS -> NNS_guerrilla
[string] guerrilla
[ud] "(guerrilla<root> / guerrilla)"

IN -> IN_outside
[string] outside
[ud] "(outside<root> / outside)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NNP -> NNP_Baqubah
[string] Baqubah
[ud] "(Baqubah<root> / Baqubah)"

NN -> NN_station
[string] station
[ud] "(station<root> / station)"

VBD -> VBD_detonate
[string] detonate
[ud] "(detonate<root> / detonate)"

NN -> NN_time
[string] time
[ud] "(time<root> / time)"

JJ -> JJ_safe
[string] safe
[ud] "(safe<root> / safe)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Habbaniyah
[string] Habbaniyah
[ud] "(Habbaniyah<root> / Habbaniyah)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

JJ -> JJ_hostile
[string] hostile
[ud] "(hostile<root> / hostile)"

IN -> IN_near
[string] near
[ud] "(near<root> / near)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

JJ -> JJ_sunni
[string] sunni
[ud] "(sunni<root> / sunni)"

NN -> NN_helicopter
[string] helicopter
[ud] "(helicopter<root> / helicopter)"

RB -> RB_yet
[string] yet
[ud] "(yet<root> / yet)"

DT -> DT_another
[string] another
[ud] "(another<root> / another)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

CC -> CC_but
[string] but
[ud] "(but<root> / but)"

NN -> NN_heartland
[string] heartland
[ud] "(heartland<root> / heartland)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_crew
[string] crew
[ud] "(crew<root> / crew)"

VBD -> VBD_lose
[string] lose
[ud] "(lose<root> / lose)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

IN -> IN_to
[string] to
[ud] "(to<root> / to)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_troops
[string] troops
[ud] "(troops<root> / troops)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

RB -> RB_out
[string] out
[ud] "(out<root> / out)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_against
[string] against
[ud] "(against<root> / against)"

PRP -> PRP_they
[string] they
[ud] "(they<root> / they)"

WRB -> WRB_when
[string] when
[ud] "(when<root> / when)"

NNS -> NNS_demonstrator
[string] demonstrator
[ud] "(demonstrator<root> / demonstrator)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

JJ -> JJ_newlywed
[string] newlywed
[ud] "(newlywed<root> / newlywed)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

VBD -> VBD_come
[string] come
[ud] "(come<root> / come)"

NN -> NN_bride
[string] bride
[ud] "(bride<root> / bride)"

NNP -> NNP_Fallujah
[string] Fallujah
[ud] "(Fallujah<root> / Fallujah)"

NNS -> NNS_hundred
[string] hundred
[ud] "(hundred<root> / hundred)"

RB -> RB_briefly
[string] briefly
[ud] "(briefly<root> / briefly)"

JJ -> JJ_yound
[string] yound
[ud] "(yound<root> / yound)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

VBD -> VBD_arrest
[string] arrest
[ud] "(arrest<root> / arrest)"

HYPHENRRBHYPHEN -> HYPHENRRBHYPHEN_RRB
[string] RRB
[ud] "(RRB<root> / RRB)"

HYPHENLRBHYPHEN -> HYPHENLRBHYPHEN_LRB
[string] LRB
[ud] "(LRB<root> / LRB)"

IN -> IN_from
[string] from
[ud] "(from<root> / from)"

NN -> NN_information
[string] information
[ud] "(information<root> / information)"

JJ -> JJ_bad
[string] bad
[ud] "(bad<root> / bad)"

NN -> NN_tradeoff
[string] tradeoff
[ud] "(tradeoff<root> / tradeoff)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBD -> VBD_get
[string] get
[ud] "(get<root> / get)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

NN -> NN_army
[string] army
[ud] "(army<root> / army)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

RB -> RB_otherwise
[string] otherwise
[ud] "(otherwise<root> / otherwise)"

JJ -> JJ_bad
[string] bad
[ud] "(bad<root> / bad)"

JJ -> JJ_enormous
[string] enormous
[ud] "(enormous<root> / enormous)"

NNS -> NNS_relative
[string] relative
[ud] "(relative<root> / relative)"

PRP -> PRP_I
[string] I
[ud] "(I<root> / I)"

NN -> NN_amount
[string] amount
[ud] "(amount<root> / amount)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

PRPDOLLAR -> PRPDOLLAR_she
[string] she
[ud] "(she<root> / she)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

IN -> IN_because
[string] because
[ud] "(because<root> / because)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

VBP -> VBP_hope
[string] hope
[ud] "(hope<root> / hope)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

NN -> NN_move
[string] move
[ud] "(move<root> / move)"

NNS -> NNS_troops
[string] troops
[ud] "(troops<root> / troops)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_into
[string] into
[ud] "(into<root> / into)"

JJ -> JJ_hostile
[string] hostile
[ud] "(hostile<root> / hostile)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBD -> VBD_fire
[string] fire
[ud] "(fire<root> / fire)"

CD -> CD_DIGIT
[string] DIGIT
[ud] "(DIGIT<root> / DIGIT)"

VBG -> VBG_kill
[string] kill
[ud] "(kill<root> / kill)"

NN -> NN_crowd
[string] crowd
[ud] "(crowd<root> / crowd)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

JJ -> JJ_local
[string] local
[ud] "(local<root> / local)"

VBZ -> VBZ_seem
[string] seem
[ud] "(seem<root> / seem)"

VBN -> VBN_do
[string] do
[ud] "(do<root> / do)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

RB -> RB_at
[string] at
[ud] "(at<root> / at)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_manhunt
[string] manhunt
[ud] "(manhunt<root> / manhunt)"

VBP -> VBP_be
[string] be
[ud] "(be<root> / be)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

IN -> IN_to
[string] to
[ud] "(to<root> / to)"

NNP -> NNP_Baath
[string] Baath
[ud] "(Baath<root> / Baath)"

RBS -> RBS_least
[string] least
[ud] "(least<root> / least)"

JJ -> JJ_sunni
[string] sunni
[ud] "(sunni<root> / sunni)"

PRP -> PRP_it
[string] it
[ud] "(it<root> / it)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

PRP -> PRP_I
[string] I
[ud] "(I<root> / I)"

NN -> NN_heartland
[string] heartland
[ud] "(heartland<root> / heartland)"

NN -> NN_standing
[string] standing
[ud] "(standing<root> / standing)"

CC -> CC_or
[string] or
[ud] "(or<root> / or)"

RB -> RB_wrong
[string] wrong
[ud] "(wrong<root> / wrong)"

NNS -> NNS_way
[string] way
[ud] "(way<root> / way)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNPS -> NNPS_Iraqis
[string] Iraqis
[ud] "(Iraqis<root> / Iraqis)"

JJ -> JJ_high
[string] high
[ud] "(high<root> / high)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

WDT -> WDT_that
[string] that
[ud] "(that<root> / that)"

VBG -> VBG_be
[string] be
[ud] "(be<root> / be)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

NNS -> NNS_official
[string] official
[ud] "(official<root> / official)"

JJ -> JJ_bad
[string] bad
[ud] "(bad<root> / bad)"

JJ -> JJ_clear
[string] clear
[ud] "(clear<root> / clear)"

RB -> RB_finally
[string] finally
[ud] "(finally<root> / finally)"

HYPHENRRBHYPHEN -> HYPHENRRBHYPHEN_RRB
[string] RRB
[ud] "(RRB<root> / RRB)"

COLON -> COLON_HYPHENHYPHEN
[string] HYPHENHYPHEN
[ud] "(HYPHENHYPHEN<root> / HYPHENHYPHEN)"

IN -> IN_to
[string] to
[ud] "(to<root> / to)"

WP -> WP_who
[string] who
[ud] "(who<root> / who)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

JJ -> JJ_miniscule
[string] miniscule
[ud] "(miniscule<root> / miniscule)"

NN -> NN_story
[string] story
[ud] "(story<root> / story)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

PRP -> PRP_it
[string] it
[ud] "(it<root> / it)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_day
[string] day
[ud] "(day<root> / day)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

VB -> VB_present
[string] present
[ud] "(present<root> / present)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

VBZ -> VBZ_have
[string] have
[ud] "(have<root> / have)"

NNP -> NNP_Google
[string] Google
[ud] "(Google<root> / Google)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBP -> VBP_have
[string] have
[ud] "(have<root> / have)"

NN -> NN_number
[string] number
[ud] "(number<root> / number)"

HYPHENLRBHYPHEN -> HYPHENLRBHYPHEN_LRB
[string] LRB
[ud] "(LRB<root> / LRB)"

NNS -> NNS_people
[string] people
[ud] "(people<root> / people)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBN -> VBN_hear
[string] hear
[ud] "(hear<root> / hear)"

NN -> NN_chance
[string] chance
[ud] "(chance<root> / chance)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

NN -> NN_company
[string] company
[ud] "(company<root> / company)"

NN -> NN_analyst
[string] analyst
[ud] "(analyst<root> / analyst)"

VBN -> VBN_have
[string] have
[ud] "(have<root> / have)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

IN -> IN_about
[string] about
[ud] "(about<root> / about)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_chance
[string] chance
[ud] "(chance<root> / chance)"

VB -> VB_suck
[string] suck
[ud] "(suck<root> / suck)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

DT -> DT_these
[string] these
[ud] "(these<root> / these)"

NN -> NN_company
[string] company
[ud] "(company<root> / company)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

RB -> RB_just
[string] just
[ud] "(just<root> / just)"

RB -> RB_actually
[string] actually
[ud] "(actually<root> / actually)"

RB -> RB_usually
[string] usually
[ud] "(usually<root> / usually)"

NN -> NN_time
[string] time
[ud] "(time<root> / time)"

NNS -> NNS_suckup
[string] suckup
[ud] "(suckup<root> / suckup)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

CC -> CC_but
[string] but
[ud] "(but<root> / but)"

NNS -> NNS_plan
[string] plan
[ud] "(plan<root> / plan)"

JJ -> JJ_concerned
[string] concerned
[ud] "(concerned<root> / concerned)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

NNS -> NNS_people
[string] people
[ud] "(people<root> / people)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

VBP -> VBP_be
[string] be
[ud] "(be<root> / be)"

VBP -> VBP_be
[string] be
[ud] "(be<root> / be)"

RP -> RP_up
[string] up
[ud] "(up<root> / up)"

WRB -> WRB_when
[string] when
[ud] "(when<root> / when)"

MD -> MD_will
[string] will
[ud] "(will<root> / will)"

NNS -> NNS_goal
[string] goal
[ud] "(goal<root> / goal)"

WPDOLLAR -> WPDOLLAR_whoSQs
[string] whoSQs
[ud] "(whoSQs<root> / whoSQs)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

VB -> VB_do
[string] do
[ud] "(do<root> / do)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

VBP -> VBP_include
[string] include
[ud] "(include<root> / include)"

JJ -> JJ_evil
[string] evil
[ud] "(evil<root> / evil)"

RB -> RB_all
[string] all
[ud] "(all<root> / all)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_history
[string] history
[ud] "(history<root> / history)"

VBN -> VBN_state
[string] state
[ud] "(state<root> / state)"

NN -> NN_company
[string] company
[ud] "(company<root> / company)"

PRP -> PRP_they
[string] they
[ud] "(they<root> / they)"

RB -> RB_so
[string] so
[ud] "(so<root> / so)"

VBP -> VBP_work
[string] work
[ud] "(work<root> / work)"

VBP -> VBP_imagine
[string] imagine
[ud] "(imagine<root> / imagine)"

PRP -> PRP_they
[string] they
[ud] "(they<root> / they)"

JJ -> JJ_profitable
[string] profitable
[ud] "(profitable<root> / profitable)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

VB -> VB_do
[string] do
[ud] "(do<root> / do)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNP -> NNP_Wall
[string] Wall
[ud] "(Wall<root> / Wall)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

NNP -> NNP_Street
[string] Street
[ud] "(Street<root> / Street)"

PRP -> PRP_they
[string] they
[ud] "(they<root> / they)"

VBP -> VBP_hear
[string] hear
[ud] "(hear<root> / hear)"

JJ -> JJ_eventually
[string] eventually
[ud] "(eventually<root> / eventually)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

WPDOLLAR -> WPDOLLAR_whoSQs
[string] whoSQs
[ud] "(whoSQs<root> / whoSQs)"

IN -> IN_after
[string] after
[ud] "(after<root> / after)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

NN -> NN_company
[string] company
[ud] "(company<root> / company)"

NNP -> NNP_Brin
[string] Brin
[ud] "(Brin<root> / Brin)"

PRP -> PRP_it
[string] it
[ud] "(it<root> / it)"

WDT -> WDT_which
[string] which
[ud] "(which<root> / which)"

NN -> NN_proof
[string] proof
[ud] "(proof<root> / proof)"

RB -> RB_quite
[string] quite
[ud] "(quite<root> / quite)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_company
[string] company
[ud] "(company<root> / company)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

NNS -> NNS_project
[string] project
[ud] "(project<root> / project)"

VBZ -> VBZ_have
[string] have
[ud] "(have<root> / have)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

NN -> NN_research
[string] research
[ud] "(research<root> / research)"

MD -> MD_would
[string] would
[ud] "(would<root> / would)"

JJ -> JJ_good
[string] good
[ud] "(good<root> / good)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

IQIQ -> IQIQ_SQ
[string] SQ
[ud] "(SQ<root> / SQ)"

JJ -> JJ_mathematical
[string] mathematical
[ud] "(mathematical<root> / mathematical)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_self
[string] self
[ud] "(self<root> / self)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_environment
[string] environment
[ud] "(environment<root> / environment)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

RB -> RB_actually
[string] actually
[ud] "(actually<root> / actually)"

JJ -> JJ_respectable
[string] respectable
[ud] "(respectable<root> / respectable)"

COLON -> COLON_COLON
[string] COLON
[ud] "(COLON<root> / COLON)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

JJ -> JJ_own
[string] own
[ud] "(own<root> / own)"

NN -> NN_research
[string] research
[ud] "(research<root> / research)"

CD -> CD_one
[string] one
[ud] "(one<root> / one)"

NN -> NN_strategy
[string] strategy
[ud] "(strategy<root> / strategy)"

PRPDOLLAR -> PRPDOLLAR_they
[string] they
[ud] "(they<root> / they)"

JJ -> JJ_freewheeling
[string] freewheeling
[ud] "(freewheeling<root> / freewheeling)"

NN -> NN_idea
[string] idea
[ud] "(idea<root> / idea)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

IN -> IN_as
[string] as
[ud] "(as<root> / as)"

VB -> VB_imagine
[string] imagine
[ud] "(imagine<root> / imagine)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNS -> NNS_employee
[string] employee
[ud] "(employee<root> / employee)"

NNP -> NNP_Sergey
[string] Sergey
[ud] "(Sergey<root> / Sergey)"

NN -> NN_week
[string] week
[ud] "(week<root> / week)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

VBN -> VBN_create
[string] create
[ud] "(create<root> / create)"

VB -> VB_do
[string] do
[ud] "(do<root> / do)"

RB -> RB_as
[string] as
[ud] "(as<root> / as)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

SQSQ -> SQSQ_SQ
[string] SQ
[ud] "(SQ<root> / SQ)"

NN -> NN_day
[string] day
[ud] "(day<root> / day)"

VBZ -> VBZ_give
[string] give
[ud] "(give<root> / give)"

PRP -> PRP_you
[string] you
[ud] "(you<root> / you)"

VBN -> VBN_drive
[string] drive
[ud] "(drive<root> / drive)"

EX -> EX_there
[string] there
[ud] "(there<root> / there)"

COMMA -> COMMA_SEMICOLON
[string] SEMICOLON
[ud] "(SEMICOLON<root> / SEMICOLON)"

JJ -> JJ_entire
[string] entire
[ud] "(entire<root> / entire)"

NN -> NN_punchline
[string] punchline
[ud] "(punchline<root> / punchline)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

RB -> RB_too
[string] too
[ud] "(too<root> / too)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

VB -> VB_read
[string] read
[ud] "(read<root> / read)"

NN -> NN_article
[string] article
[ud] "(article<root> / article)"

NN -> NN_piece
[string] piece
[ud] "(piece<root> / piece)"

VBZ -> VBZ_have
[string] have
[ud] "(have<root> / have)"

PRPDOLLAR -> PRPDOLLAR_my
[string] my
[ud] "(my<root> / my)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

IN -> IN_at
[string] at
[ud] "(at<root> / at)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NNS -> NNS_implication
[string] implication
[ud] "(implication<root> / implication)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_opinion
[string] opinion
[ud] "(opinion<root> / opinion)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

NNP -> NNP_Arafat
[string] Arafat
[ud] "(Arafat<root> / Arafat)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Newsday
[string] Newsday
[ud] "(Newsday<root> / Newsday)"

NNP -> NNP_al
[string] al
[ud] "(al<root> / al)"

NNP -> NNP_Qaeda
[string] Qaeda
[ud] "(Qaeda<root> / Qaeda)"

NN -> NN_passing
[string] passing
[ud] "(passing<root> / passing)"

VBN -> VBN_appear
[string] appear
[ud] "(appear<root> / appear)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

NN -> NN_excerpt
[string] excerpt
[ud] "(excerpt<root> / excerpt)"

COLON -> COLON_COLON
[string] COLON
[ud] "(COLON<root> / COLON)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

NN -> NN_state
[string] state
[ud] "(state<root> / state)"

CD -> CD_two
[string] two
[ud] "(two<root> / two)"

VB -> VB_compromise
[string] compromise
[ud] "(compromise<root> / compromise)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

JJ -> JJ_rocky
[string] rocky
[ud] "(rocky<root> / rocky)"

NN -> NN_solution
[string] solution
[ud] "(solution<root> / solution)"

RB -> RB_even
[string] even
[ud] "(even<root> / even)"

NN -> NN_nationalism
[string] nationalism
[ud] "(nationalism<root> / nationalism)"

NNP -> NNP_Israel
[string] Israel
[ud] "(Israel<root> / Israel)"

NNP -> NNP_Arafat
[string] Arafat
[ud] "(Arafat<root> / Arafat)"

VB -> VB_imagine
[string] imagine
[ud] "(imagine<root> / imagine)"

IN -> IN_if
[string] if
[ud] "(if<root> / if)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

JJ -> JJ_secular
[string] secular
[ud] "(secular<root> / secular)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBD -> VBD_remain
[string] remain
[ud] "(remain<root> / remain)"

RB -> RB_enough
[string] enough
[ud] "(enough<root> / enough)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNS -> NNS_negotiation
[string] negotiation
[ud] "(negotiation<root> / negotiation)"

NN -> NN_road
[string] road
[ud] "(road<root> / road)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

JJ -> JJ_supple
[string] supple
[ud] "(supple<root> / supple)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_peace
[string] peace
[ud] "(peace<root> / peace)"

NNP -> NNP_Palestinian
[string] Palestinian
[ud] "(Palestinian<root> / Palestinian)"

JJ -> JJ_israeli
[string] israeli
[ud] "(israeli<root> / israeli)"

JJ -> JJ_such
[string] such
[ud] "(such<root> / such)"

VBD -> VBD_help
[string] help
[ud] "(help<root> / help)"

WDT -> WDT_which
[string] which
[ud] "(which<root> / which)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNPS -> NNPS_territories
[string] territories
[ud] "(territories<root> / territories)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

VB -> VB_derail
[string] derail
[ud] "(derail<root> / derail)"

JJ -> JJ_radical
[string] radical
[ud] "(radical<root> / radical)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Sharon
[string] Sharon
[ud] "(Sharon<root> / Sharon)"

IN -> IN_by
[string] by
[ud] "(by<root> / by)"

VBN -> VBN_occupy
[string] occupy
[ud] "(occupy<root> / occupy)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_colonization
[string] colonization
[ud] "(colonization<root> / colonization)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_process
[string] process
[ud] "(process<root> / process)"

NNP -> NNP_Hamas
[string] Hamas
[ud] "(Hamas<root> / Hamas)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

IN -> IN_along
[string] along
[ud] "(along<root> / along)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNS -> NNS_attack
[string] attack
[ud] "(attack<root> / attack)"

IN -> IN_during
[string] during
[ud] "(during<root> / during)"

RB -> RB_always
[string] always
[ud] "(always<root> / always)"

NNS -> NNS_group
[string] group
[ud] "(group<root> / group)"

VBD -> VBD_have
[string] have
[ud] "(have<root> / have)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NNS -> NNS_DIGITDIGITDIGITDIGIT
[string] DIGITDIGITDIGITDIGIT
[ud] "(DIGITDIGITDIGITDIGIT<root> / DIGITDIGITDIGITDIGIT)"

IN -> IN_as
[string] as
[ud] "(as<root> / as)"

JJ -> JJ_terrorist
[string] terrorist
[ud] "(terrorist<root> / terrorist)"

VBN -> VBN_continue
[string] continue
[ud] "(continue<root> / continue)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

VBN -> VBN_oppose
[string] oppose
[ud] "(oppose<root> / oppose)"

NN -> NN_leadership
[string] leadership
[ud] "(leadership<root> / leadership)"

RB -> RB_soon
[string] soon
[ud] "(soon<root> / soon)"

NN -> NN_vacuum
[string] vacuum
[ud] "(vacuum<root> / vacuum)"

NN -> NN_death
[string] death
[ud] "(death<root> / death)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

NNP -> NNP_Arafat
[string] Arafat
[ud] "(Arafat<root> / Arafat)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

MD -> MD_will
[string] will
[ud] "(will<root> / will)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

JJ -> JJ_palestinian
[string] palestinian
[ud] "(palestinian<root> / palestinian)"

WDT -> WDT_that
[string] that
[ud] "(that<root> / that)"

VBN -> VBN_fill
[string] fill
[ud] "(fill<root> / fill)"

VBZ -> VBZ_create
[string] create
[ud] "(create<root> / create)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

JJ -> JJ_major
[string] major
[ud] "(major<root> / major)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

VBZ -> VBZ_have
[string] have
[ud] "(have<root> / have)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

NNS -> NNS_structure
[string] structure
[ud] "(structure<root> / structure)"

NN -> NN_party
[string] party
[ud] "(party<root> / party)"

NN -> NN_assassination
[string] assassination
[ud] "(assassination<root> / assassination)"

NNP -> NNP_Hamas
[string] Hamas
[ud] "(Hamas<root> / Hamas)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNS -> NNS_leader
[string] leader
[ud] "(leader<root> / leader)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

RB -> RB_also
[string] also
[ud] "(also<root> / also)"

NNP -> NNP_Sharon
[string] Sharon
[ud] "(Sharon<root> / Sharon)"

DT -> DT_that
[string] that
[ud] "(that<root> / that)"

VBN -> VBN_weaken
[string] weaken
[ud] "(weaken<root> / weaken)"

NN -> NN_authority
[string] authority
[ud] "(authority<root> / authority)"

PRPDOLLAR -> PRPDOLLAR_they
[string] they
[ud] "(they<root> / they)"

VB -> VB_grow
[string] grow
[ud] "(grow<root> / grow)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

WDT -> WDT_that
[string] that
[ud] "(that<root> / that)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_leadership
[string] leadership
[ud] "(leadership<root> / leadership)"

RP -> RP_up
[string] up
[ud] "(up<root> / up)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

VB -> VB_find
[string] find
[ud] "(find<root> / find)"

JJ -> JJ_radical
[string] radical
[ud] "(radical<root> / radical)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_way
[string] way
[ud] "(way<root> / way)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNPS -> NNPS_Palestinians
[string] Palestinians
[ud] "(Palestinians<root> / Palestinians)"

NNS -> NNS_cell
[string] cell
[ud] "(cell<root> / cell)"

NN -> NN_peace
[string] peace
[ud] "(peace<root> / peace)"

VB -> VB_reinvigorate
[string] reinvigorate
[ud] "(reinvigorate<root> / reinvigorate)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

MD -> MD_may
[string] may
[ud] "(may<root> / may)"

JJ -> JJ_young
[string] young
[ud] "(young<root> / young)"

NNP -> NNP_bin
[string] bin
[ud] "(bin<root> / bin)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNS -> NNS_cue
[string] cue
[ud] "(cue<root> / cue)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

IN -> IN_if
[string] if
[ud] "(if<root> / if)"

VBP -> VBP_look
[string] look
[ud] "(look<root> / look)"

NNP -> NNP_Laden
[string] Laden
[ud] "(Laden<root> / Laden)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

MD -> MD_can
[string] can
[ud] "(can<root> / can)"

NN -> NN_process
[string] process
[ud] "(process<root> / process)"

NNPS -> NNPS_Israelis
[string] Israelis
[ud] "(Israelis<root> / Israelis)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

JJ -> JJ_palestinian
[string] palestinian
[ud] "(palestinian<root> / palestinian)"

IN -> IN_to
[string] to
[ud] "(to<root> / to)"

TO -> TO_to
[string] to
[ud] "(to<root> / to)"

VBZ -> VBZ_remain
[string] remain
[ud] "(remain<root> / remain)"

NNS -> NNS_man
[string] man
[ud] "(man<root> / man)"

NNS -> NNS_leader
[string] leader
[ud] "(leader<root> / leader)"

NN -> NN_recruiting
[string] recruiting
[ud] "(recruiting<root> / recruiting)"

RB -> RB_out
[string] out
[ud] "(out<root> / out)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

RB -> RB_even
[string] even
[ud] "(even<root> / even)"

JJ -> JJ_strong
[string] strong
[ud] "(strong<root> / strong)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

JJ -> JJ_muslim
[string] muslim
[ud] "(muslim<root> / muslim)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_among
[string] among
[ud] "(among<root> / among)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

JJ -> JJ_local
[string] local
[ud] "(local<root> / local)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

JJ -> JJ_enough
[string] enough
[ud] "(enough<root> / enough)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

IN -> IN_if
[string] if
[ud] "(if<root> / if)"

JJ -> JJ_young
[string] young
[ud] "(young<root> / young)"

NNP -> NNP_Qaida
[string] Qaida
[ud] "(Qaida<root> / Qaida)"

NNP -> NNP_al
[string] al
[ud] "(al<root> / al)"

NN -> NN_struggle
[string] struggle
[ud] "(struggle<root> / struggle)"

JJ -> JJ_israeli
[string] israeli
[ud] "(israeli<root> / israeli)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

JJ -> JJ_palestinian
[string] palestinian
[ud] "(palestinian<root> / palestinian)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNS -> NNS_poster
[string] poster
[ud] "(poster<root> / poster)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

VB -> VB_keep
[string] keep
[ud] "(keep<root> / keep)"

NNP -> NNP_Qaida
[string] Qaida
[ud] "(Qaida<root> / Qaida)"

VBP -> VBP_remain
[string] remain
[ud] "(remain<root> / remain)"

NNP -> NNP_al
[string] al
[ud] "(al<root> / al)"

JJS -> JJS_best
[string] best
[ud] "(best<root> / best)"

JJ -> JJ_palestinian
[string] palestinian
[ud] "(palestinian<root> / palestinian)"

VBG -> VBG_fester
[string] fester
[ud] "(fester<root> / fester)"

NNP -> NNP_United
[string] United
[ud] "(United<root> / United)"

NN -> NN_terror
[string] terror
[ud] "(terror<root> / terror)"

JJ -> JJ_effective
[string] effective
[ud] "(effective<root> / effective)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

MD -> MD_would
[string] would
[ud] "(would<root> / would)"

NNP -> NNP_States
[string] States
[ud] "(States<root> / States)"

NN -> NN_conflict
[string] conflict
[ud] "(conflict<root> / conflict)"

VB -> VB_deploy
[string] deploy
[ud] "(deploy<root> / deploy)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

NN -> NN_weapon
[string] weapon
[ud] "(weapon<root> / weapon)"

NN -> NN_war
[string] war
[ud] "(war<root> / war)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

RBS -> RBS_most
[string] most
[ud] "(most<root> / most)"

VBG -> VBG_resolve
[string] resolve
[ud] "(resolve<root> / resolve)"

VB -> VB_be
[string] be
[ud] "(be<root> / be)"

PRPDOLLAR -> PRPDOLLAR_its
[string] its
[ud] "(its<root> / its)"

MD -> MD_could
[string] could
[ud] "(could<root> / could)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBZ -> VBZ_report
[string] report
[ud] "(report<root> / report)"

NNP -> NNP_Xinhua
[string] Xinhua
[ud] "(Xinhua<root> / Xinhua)"

NNP -> NNP_Sheikh
[string] Sheikh
[ud] "(Sheikh<root> / Sheikh)"

RB -> RB_before
[string] before
[ud] "(before<root> / before)"

JJ -> JJ_religious
[string] religious
[ud] "(religious<root> / religious)"

JJ -> JJ_wide
[string] wide
[ud] "(wide<root> / wide)"

NNP -> NNP_Tuesday
[string] Tuesday
[ud] "(Tuesday<root> / Tuesday)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

NNS -> NNS_force
[string] force
[ud] "(force<root> / force)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

POS -> POS_SQs
[string] SQs
[ud] "(SQs<root> / SQs)"

NN -> NN_range
[string] range
[ud] "(range<root> / range)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Yassin
[string] Yassin
[ud] "(Yassin<root> / Yassin)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

JJ -> JJ_iraqi
[string] iraqi
[ud] "(iraqi<root> / iraqi)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_day
[string] day
[ud] "(day<root> / day)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

VBD -> VBD_condemn
[string] condemn
[ud] "(condemn<root> / condemn)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NNP -> NNP_Ahmed
[string] Ahmed
[ud] "(Ahmed<root> / Ahmed)"

NN -> NN_leader
[string] leader
[ud] "(leader<root> / leader)"

NNP -> NNP_Sharon
[string] Sharon
[ud] "(Sharon<root> / Sharon)"

JJ -> JJ_political
[string] political
[ud] "(political<root> / political)"

NNP -> NNP_Hamas
[string] Hamas
[ud] "(Hamas<root> / Hamas)"

NN -> NN_murder
[string] murder
[ud] "(murder<root> / murder)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NNP -> NNP_Baghdad
[string] Baghdad
[ud] "(Baghdad<root> / Baghdad)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NN -> NN_assassination
[string] assassination
[ud] "(assassination<root> / assassination)"

RB -> RB_west
[string] west
[ud] "(west<root> / west)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Iraq
[string] Iraq
[ud] "(Iraq<root> / Iraq)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

JJ -> JJ_immediate
[string] immediate
[ud] "(immediate<root> / immediate)"

NNS -> NNS_km
[string] km
[ud] "(km<root> / km)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

IN -> IN_against
[string] against
[ud] "(against<root> / against)"

VBD -> VBD_promise
[string] promise
[ud] "(promise<root> / promise)"

NN -> NN_coalition
[string] coalition
[ud] "(coalition<root> / coalition)"

NNP -> NNP_Fallujah
[string] Fallujah
[ud] "(Fallujah<root> / Fallujah)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNS -> NNS_cleric
[string] cleric
[ud] "(cleric<root> / cleric)"

VBD -> VBD_condemn
[string] condemn
[ud] "(condemn<root> / condemn)"

JJ -> JJ_muslim
[string] muslim
[ud] "(muslim<root> / muslim)"

NNS -> NNS_soldier
[string] soldier
[ud] "(soldier<root> / soldier)"

NN -> NN_revenge
[string] revenge
[ud] "(revenge<root> / revenge)"

CD -> CD_DIGITDIGIT
[string] DIGITDIGIT
[ud] "(DIGITDIGIT<root> / DIGITDIGIT)"

NN -> NN_board
[string] board
[ud] "(board<root> / board)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

NNP -> NNP_Sharq
[string] Sharq
[ud] "(Sharq<root> / Sharq)"

NNP -> NNP_Tuesday
[string] Tuesday
[ud] "(Tuesday<root> / Tuesday)"

JJ -> JJ_general
[string] general
[ud] "(general<root> / general)"

VBN -> VBN_close
[string] close
[ud] "(close<root> / close)"

VBZ -> VBZ_report
[string] report
[ud] "(report<root> / report)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

NNP -> NNP_Awsat
[string] Awsat
[ud] "(Awsat<root> / Awsat)"

NN -> NN_strike
[string] strike
[ud] "(strike<root> / strike)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNP -> NNP_Fallujah
[string] Fallujah
[ud] "(Fallujah<root> / Fallujah)"

NNP -> NNP_Ash
[string] Ash
[ud] "(Ash<root> / Ash)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

NNP -> NNP_al
[string] al
[ud] "(al<root> / al)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBD -> VBD_leave
[string] leave
[ud] "(leave<root> / leave)"

NN -> NN_fight
[string] fight
[ud] "(fight<root> / fight)"

CD -> CD_one
[string] one
[ud] "(one<root> / one)"

RB -> RB_there
[string] there
[ud] "(there<root> / there)"

JJ -> JJ_dead
[string] dead
[ud] "(dead<root> / dead)"

VBD -> VBD_clash
[string] clash
[ud] "(clash<root> / clash)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

NNS -> NNS_troops
[string] troops
[ud] "(troops<root> / troops)"

NNS -> NNS_guerrilla
[string] guerrilla
[ud] "(guerrilla<root> / guerrilla)"

NNP -> NNP_Iraqi
[string] Iraqi
[ud] "(Iraqi<root> / Iraqi)"

WDT -> WDT_that
[string] that
[ud] "(that<root> / that)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

JJ -> JJ_big
[string] big
[ud] "(big<root> / big)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NNP -> NNP_Ramadi
[string] Ramadi
[ud] "(Ramadi<root> / Ramadi)"

NN -> NN_demonstration
[string] demonstration
[ud] "(demonstration<root> / demonstration)"

EX -> EX_there
[string] there
[ud] "(there<root> / there)"

CD -> CD_one
[string] one
[ud] "(one<root> / one)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

HYPH -> HYPH_HYPHEN
[string] HYPHEN
[ud] "(HYPHEN<root> / HYPHEN)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

NN -> NN_attack
[string] attack
[ud] "(attack<root> / attack)"

RB -> RB_only
[string] only
[ud] "(only<root> / only)"

DT -> DT_that
[string] that
[ud] "(that<root> / that)"

VBN -> VBN_leave
[string] leave
[ud] "(leave<root> / leave)"

NN -> NN_choice
[string] choice
[ud] "(choice<root> / choice)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNPS -> NNPS_Zionists
[string] Zionists
[ud] "(Zionists<root> / Zionists)"

IN -> IN_for
[string] for
[ud] "(for<root> / for)"

NNPS -> NNPS_Arabs
[string] Arabs
[ud] "(Arabs<root> / Arabs)"

NNP -> NNP_Sadr
[string] Sadr
[ud] "(Sadr<root> / Sadr)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

JJ -> JJ_shiite
[string] shiite
[ud] "(shiite<root> / shiite)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

JJ -> JJ_criminal
[string] criminal
[ud] "(criminal<root> / criminal)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_al
[string] al
[ud] "(al<root> / al)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBD -> VBD_say
[string] say
[ud] "(say<root> / say)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

NN -> NN_fighting
[string] fighting
[ud] "(fighting<root> / fighting)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

NN -> NN_jihad
[string] jihad
[ud] "(jihad<root> / jihad)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

NN -> NN_cleric
[string] cleric
[ud] "(cleric<root> / cleric)"

JJ -> JJ_radical
[string] radical
[ud] "(radical<root> / radical)"

NNP -> NNP_Muqtada
[string] Muqtada
[ud] "(Muqtada<root> / Muqtada)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBP -> VBP_have
[string] have
[ud] "(have<root> / have)"

NN -> NN_authority
[string] authority
[ud] "(authority<root> / authority)"

JJ -> JJ_israeli
[string] israeli
[ud] "(israeli<root> / israeli)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

NNS -> NNS_endeavor
[string] endeavor
[ud] "(endeavor<root> / endeavor)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

JJ -> JJ_interim
[string] interim
[ud] "(interim<root> / interim)"

PRP -> PRP_it
[string] it
[ud] "(it<root> / it)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBG -> VBG_say
[string] say
[ud] "(say<root> / say)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

NN -> NN_region
[string] region
[ud] "(region<root> / region)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBD -> VBD_issue
[string] issue
[ud] "(issue<root> / issue)"

NNP -> NNP_Council
[string] Council
[ud] "(Council<root> / Council)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_destruction
[string] destruction
[ud] "(destruction<root> / destruction)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_emptiness
[string] emptiness
[ud] "(emptiness<root> / emptiness)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_peace
[string] peace
[ud] "(peace<root> / peace)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Governing
[string] Governing
[ud] "(Governing<root> / Governing)"

NN -> NN_proof
[string] proof
[ud] "(proof<root> / proof)"

NN -> NN_communique
[string] communique
[ud] "(communique<root> / communique)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBD -> VBD_claim
[string] claim
[ud] "(claim<root> / claim)"

IN -> IN_to
[string] to
[ud] "(to<root> / to)"

MD -> MD_would
[string] would
[ud] "(would<root> / would)"

NN -> NN_operation
[string] operation
[ud] "(operation<root> / operation)"

NN -> NN_world
[string] world
[ud] "(world<root> / world)"

NN -> NN_region
[string] region
[ud] "(region<root> / region)"

RB -> RB_not
[string] not
[ud] "(not<root> / not)"

VB -> VB_consolidate
[string] consolidate
[ud] "(consolidate<root> / consolidate)"

NN -> NN_message
[string] message
[ud] "(message<root> / message)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

RB -> RB_only
[string] only
[ud] "(only<root> / only)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

MD -> MD_would
[string] would
[ud] "(would<root> / would)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NN -> NN_peace
[string] peace
[ud] "(peace<root> / peace)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

JJ -> JJ_terrorist
[string] terrorist
[ud] "(terrorist<root> / terrorist)"

NNS -> NNS_act
[string] act
[ud] "(act<root> / act)"

VB -> VB_bring
[string] bring
[ud] "(bring<root> / bring)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

JJ -> JJ_israeli
[string] israeli
[ud] "(israeli<root> / israeli)"

IN -> IN_under
[string] under
[ud] "(under<root> / under)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NN -> NN_occupation
[string] occupation
[ud] "(occupation<root> / occupation)"

NNS -> NNS_people
[string] people
[ud] "(people<root> / people)"

VBD -> VBD_allege
[string] allege
[ud] "(allege<root> / allege)"

DT -> DT_that
[string] that
[ud] "(that<root> / that)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

IN -> IN_that
[string] that
[ud] "(that<root> / that)"

VBP -> VBP_relate
[string] relate
[ud] "(relate<root> / relate)"

NN -> NN_case
[string] case
[ud] "(case<root> / case)"

IN -> IN_with
[string] with
[ud] "(with<root> / with)"

VBP -> VBP_suffer
[string] suffer
[ud] "(suffer<root> / suffer)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNP -> NNP_Xinhua
[string] Xinhua
[ud] "(Xinhua<root> / Xinhua)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

JJ -> JJ_american
[string] american
[ud] "(american<root> / american)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NN -> NN_occupation
[string] occupation
[ud] "(occupation<root> / occupation)"

JJ -> JJ_palestinian
[string] palestinian
[ud] "(palestinian<root> / palestinian)"

JJ -> JJ_many
[string] many
[ud] "(many<root> / many)"

SQSQ -> SQSQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

PRPDOLLAR -> PRPDOLLAR_they
[string] they
[ud] "(they<root> / they)"

NNP -> NNP_Iraq
[string] Iraq
[ud] "(Iraq<root> / Iraq)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

NNPS -> NNPS_Iraqis
[string] Iraqis
[ud] "(Iraqis<root> / Iraqis)"

WP -> WP_who
[string] who
[ud] "(who<root> / who)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

IQIQ -> IQIQ_DQ
[string] DQ
[ud] "(DQ<root> / DQ)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

VBN -> VBN_kill
[string] kill
[ud] "(kill<root> / kill)"

RB -> RB_apparently
[string] apparently
[ud] "(apparently<root> / apparently)"

NNP -> NNP_Kirkuk
[string] Kirkuk
[ud] "(Kirkuk<root> / Kirkuk)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

CD -> CD_eleven
[string] eleven
[ud] "(eleven<root> / eleven)"

CC -> CC_and
[string] and
[ud] "(and<root> / and)"

CD -> CD_two
[string] two
[ud] "(two<root> / two)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

IN -> IN_near
[string] near
[ud] "(near<root> / near)"

NNS -> NNS_trainee
[string] trainee
[ud] "(trainee<root> / trainee)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNS -> NNS_incident
[string] incident
[ud] "(incident<root> / incident)"

NNP -> NNP_Tuesday
[string] Tuesday
[ud] "(Tuesday<root> / Tuesday)"

NNPS -> NNPS_Iraqis
[string] Iraqis
[ud] "(Iraqis<root> / Iraqis)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_group
[string] group
[ud] "(group<root> / group)"

VBG -> VBG_include
[string] include
[ud] "(include<root> / include)"

DT -> DT_some
[string] some
[ud] "(some<root> / some)"

NNS -> NNS_sniper
[string] sniper
[ud] "(sniper<root> / sniper)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

DT -> DT_a
[string] a
[ud] "(a<root> / a)"

NN -> NN_police
[string] police
[ud] "(police<root> / police)"

VBD -> VBD_be
[string] be
[ud] "(be<root> / be)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

NN -> NN_bus
[string] bus
[ud] "(bus<root> / bus)"

NNP -> NNP_Hilla
[string] Hilla
[ud] "(Hilla<root> / Hilla)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

NNS -> NNS_police
[string] police
[ud] "(police<root> / police)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

JJ -> JJ_unrelated
[string] unrelated
[ud] "(unrelated<root> / unrelated)"

IN -> IN_by
[string] by
[ud] "(by<root> / by)"

IN -> IN_in
[string] in
[ud] "(in<root> / in)"

VBN -> VBN_move
[string] move
[ud] "(move<root> / move)"

RB -> RB_on
[string] on
[ud] "(on<root> / on)"

VBP -> VBP_have
[string] have
[ud] "(have<root> / have)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

PRP -> PRP_we
[string] we
[ud] "(we<root> / we)"

VBP -> VBP_have
[string] have
[ud] "(have<root> / have)"

PRP -> PRP_we
[string] we
[ud] "(we<root> / we)"

VBN -> VBN_grow
[string] grow
[ud] "(grow<root> / grow)"

RP -> RP_up
[string] up
[ud] "(up<root> / up)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

RB -> RB_even
[string] even
[ud] "(even<root> / even)"

VB -> VB_survive
[string] survive
[ud] "(survive<root> / survive)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

IN -> IN_if
[string] if
[ud] "(if<root> / if)"

VBP -> VBP_wonder
[string] wonder
[ud] "(wonder<root> / wonder)"

NNP -> NNP_Google
[string] Google
[ud] "(Google<root> / Google)"

RB -> RB_now
[string] now
[ud] "(now<root> / now)"

NNS -> NNS_people
[string] people
[ud] "(people<root> / people)"

MD -> MD_can
[string] can
[ud] "(can<root> / can)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

PRP -> PRP_it
[string] it
[ud] "(it<root> / it)"

DT -> DT_that
[string] that
[ud] "(that<root> / that)"

VBP -> VBP_know
[string] know
[ud] "(know<root> / know)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

VBG -> VBG_overstate
[string] overstate
[ud] "(overstate<root> / overstate)"

PRP -> PRP_I
[string] I
[ud] "(I<root> / I)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

PERIOD -> PERIOD_QUE
[string] QUE
[ud] "(QUE<root> / QUE)"

NN -> NN_problem
[string] problem
[ud] "(problem<root> / problem)"

JJ -> JJ_other
[string] other
[ud] "(other<root> / other)"

NNPS -> NNPS_Marines
[string] Marines
[ud] "(Marines<root> / Marines)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

VBP -> VBP_face
[string] face
[ud] "(face<root> / face)"

NNP -> NNP_Fallujah
[string] Fallujah
[ud] "(Fallujah<root> / Fallujah)"

IN -> IN_of
[string] of
[ud] "(of<root> / of)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

COMMA -> COMMA_COMMA
[string] COMMA
[ud] "(COMMA<root> / COMMA)"

NNS -> NNS_pocket
[string] pocket
[ud] "(pocket<root> / pocket)"

NNP -> NNP_US
[string] US
[ud] "(US<root> / US)"

NN -> NN_resistance
[string] resistance
[ud] "(resistance<root> / resistance)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBD -> VBD_take
[string] take
[ud] "(take<root> / take)"

JJS -> JJS_most
[string] most
[ud] "(most<root> / most)"

CC -> CC_but
[string] but
[ud] "(but<root> / but)"

RB -> RB_still
[string] still
[ud] "(still<root> / still)"

NNP -> NNP_Wednesday
[string] Wednesday
[ud] "(Wednesday<root> / Wednesday)"

IN -> IN_on
[string] on
[ud] "(on<root> / on)"

NN -> NN_year
[string] year
[ud] "(year<root> / year)"

JJ -> JJ_nuclear
[string] nuclear
[ud] "(nuclear<root> / nuclear)"

DT -> DT_this
[string] this
[ud] "(this<root> / this)"

NN -> NN_item
[string] item
[ud] "(item<root> / item)"

PERIOD -> PERIOD_PERIOD
[string] PERIOD
[ud] "(PERIOD<root> / PERIOD)"

VBZ -> VBZ_be
[string] be
[ud] "(be<root> / be)"

NNP -> NNP_Christmas
[string] Christmas
[ud] "(Christmas<root> / Christmas)"

DT -> DT_the
[string] the
[ud] "(the<root> / the)"

JJS -> JJS_hottest
[string] hottest
[ud] "(hottest<root> / hottest)"

NN -> NN_wish
[string] wish
[ud] "(wish<root> / wish)"

NNS -> NNS_weapon
[string] weapon
[ud] "(weapon<root> / weapon)"

NNS -> NNS_list
[string] list
[ud] "(list<root> / list)"

